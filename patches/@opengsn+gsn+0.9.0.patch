diff --git a/node_modules/@opengsn/gsn/LICENSE b/node_modules/@opengsn/gsn/LICENSE
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/README.md b/node_modules/@opengsn/gsn/README.md
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/contracts/0x/LibBytesV06.sol b/node_modules/@opengsn/gsn/contracts/0x/LibBytesV06.sol
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/contracts/0x/errors/LibBytesRichErrorsV06.sol b/node_modules/@opengsn/gsn/contracts/0x/errors/LibBytesRichErrorsV06.sol
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/contracts/0x/errors/LibRichErrorsV06.sol b/node_modules/@opengsn/gsn/contracts/0x/errors/LibRichErrorsV06.sol
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/contracts/BasePaymaster.sol b/node_modules/@opengsn/gsn/contracts/BasePaymaster.sol
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/contracts/BaseRelayRecipient.sol b/node_modules/@opengsn/gsn/contracts/BaseRelayRecipient.sol
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/contracts/Migrations.sol b/node_modules/@opengsn/gsn/contracts/Migrations.sol
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/contracts/Penalizer.sol b/node_modules/@opengsn/gsn/contracts/Penalizer.sol
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/contracts/RelayHub.sol b/node_modules/@opengsn/gsn/contracts/RelayHub.sol
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/contracts/StakeManager.sol b/node_modules/@opengsn/gsn/contracts/StakeManager.sol
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/contracts/TrustedForwarder.sol b/node_modules/@opengsn/gsn/contracts/TrustedForwarder.sol
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/contracts/interfaces/IPaymaster.sol b/node_modules/@opengsn/gsn/contracts/interfaces/IPaymaster.sol
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/contracts/interfaces/IRelayHub.sol b/node_modules/@opengsn/gsn/contracts/interfaces/IRelayHub.sol
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/contracts/interfaces/IRelayRecipient.sol b/node_modules/@opengsn/gsn/contracts/interfaces/IRelayRecipient.sol
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/contracts/interfaces/IStakeManager.sol b/node_modules/@opengsn/gsn/contracts/interfaces/IStakeManager.sol
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/contracts/interfaces/ITrustedForwarder.sol b/node_modules/@opengsn/gsn/contracts/interfaces/ITrustedForwarder.sol
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/contracts/paymaster/IUniswap.sol b/node_modules/@opengsn/gsn/contracts/paymaster/IUniswap.sol
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/contracts/paymaster/TokenGasCalculator.sol b/node_modules/@opengsn/gsn/contracts/paymaster/TokenGasCalculator.sol
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/contracts/paymaster/TokenPaymaster.sol b/node_modules/@opengsn/gsn/contracts/paymaster/TokenPaymaster.sol
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/contracts/test/PayableWithEmit.sol b/node_modules/@opengsn/gsn/contracts/test/PayableWithEmit.sol
deleted file mode 100644
index 83cf7c8..0000000
--- a/node_modules/@opengsn/gsn/contracts/test/PayableWithEmit.sol
+++ /dev/null
@@ -1,29 +0,0 @@
-pragma solidity ^0.6.2;
-import "../../contracts/BaseRelayRecipient.sol";
-import "../0x/LibBytesV06.sol";
-
-//make sure that "payable" function that uses _msgSender() still works
-// (its not required to use _msgSender(), since the default function
-// will never be called through GSN, but still, if someone uses it,
-// it should work)
-contract PayableWithEmit is BaseRelayRecipient {
-
-  event Received(address sender, uint value, uint gasleft);
-
-  receive () external payable {
-
-    emit Received(_msgSender(), msg.value, gasleft());
-  }
-
-
-  //helper: send value to another contract
-  function doSend(address payable target) public payable {
-
-    uint before = gasleft();
-    // solhint-disable-next-line check-send-result
-    bool success = target.send(msg.value);
-    uint gasAfter = gasleft();
-    emit GasUsed(before-gasAfter, success);
-  }
-  event GasUsed(uint gasUsed, bool success);
-}
diff --git a/node_modules/@opengsn/gsn/contracts/test/TestPaymasterConfigurableMisbehavior.sol b/node_modules/@opengsn/gsn/contracts/test/TestPaymasterConfigurableMisbehavior.sol
deleted file mode 100644
index 36343eb..0000000
--- a/node_modules/@opengsn/gsn/contracts/test/TestPaymasterConfigurableMisbehavior.sol
+++ /dev/null
@@ -1,102 +0,0 @@
-pragma solidity ^0.6.2;
-pragma experimental ABIEncoderV2;
-
-import "./TestPaymasterEverythingAccepted.sol";
-
-contract TestPaymasterConfigurableMisbehavior is TestPaymasterEverythingAccepted {
-
-    bool public withdrawDuringPostRelayedCall;
-    bool public withdrawDuringPreRelayedCall;
-    bool public returnInvalidErrorCode;
-    bool public revertPostRelayCall;
-    bool public overspendAcceptGas;
-    bool public revertPreRelayCall;
-
-    function setWithdrawDuringPostRelayedCall(bool val) public {
-        withdrawDuringPostRelayedCall = val;
-    }
-    function setWithdrawDuringPreRelayedCall(bool val) public {
-        withdrawDuringPreRelayedCall = val;
-    }
-    function setReturnInvalidErrorCode(bool val) public {
-        returnInvalidErrorCode = val;
-    }
-    function setRevertPostRelayCall(bool val) public {
-        revertPostRelayCall = val;
-    }
-    function setRevertPreRelayCall(bool val) public {
-        revertPreRelayCall = val;
-    }
-    function setOverspendAcceptGas(bool val) public {
-        overspendAcceptGas = val;
-    }
-
-
-    function acceptRelayedCall(
-        GSNTypes.RelayRequest calldata relayRequest,
-        bytes calldata approvalData,
-        uint256 maxPossibleCharge
-    )
-    external
-    override
-    view
-    returns (bytes memory) {
-        (relayRequest, approvalData, maxPossibleCharge);
-        if (overspendAcceptGas) {
-            uint i = 0;
-            while (true) {
-                i++;
-            }
-        }
-
-        require(!returnInvalidErrorCode, "invalid code");
-
-        return "";
-    }
-
-    function preRelayedCall(bytes calldata context)
-    external
-    override
-    relayHubOnly
-    returns (bytes32) {
-        (context);
-        if (withdrawDuringPreRelayedCall) {
-            withdrawAllBalance();
-        }
-        if (revertPreRelayCall) {
-            revert("You asked me to revert, remember?");
-        }
-        return 0;
-    }
-
-    function postRelayedCall(
-        bytes calldata context,
-        bool success,
-        bytes32 preRetVal,
-        uint256 gasUseWithoutPost,
-        GSNTypes.GasData calldata gasData
-    )
-    external
-    override
-    relayHubOnly
-    {
-        (context, success, preRetVal, gasUseWithoutPost, gasData);
-        if (withdrawDuringPostRelayedCall) {
-            withdrawAllBalance();
-        }
-        if (revertPostRelayCall) {
-            revert("You asked me to revert, remember?");
-        }
-    }
-
-    /// leaving withdrawal public and unprotected
-    function withdrawAllBalance() public returns (uint256) {
-        require(address(relayHub) != address(0), "relay hub address not set");
-        uint256 balance = relayHub.balanceOf(address(this));
-        relayHub.withdraw(balance, address(this));
-        return balance;
-    }
-
-    // solhint-disable-next-line no-empty-blocks
-    receive() external override payable {}
-}
diff --git a/node_modules/@opengsn/gsn/contracts/test/TestPaymasterEverythingAccepted.sol b/node_modules/@opengsn/gsn/contracts/test/TestPaymasterEverythingAccepted.sol
deleted file mode 100644
index e8f917a..0000000
--- a/node_modules/@opengsn/gsn/contracts/test/TestPaymasterEverythingAccepted.sol
+++ /dev/null
@@ -1,69 +0,0 @@
-pragma solidity ^0.6.2;
-pragma experimental ABIEncoderV2;
-
-import "../BasePaymaster.sol";
-
-contract TestPaymasterEverythingAccepted is BasePaymaster {
-
-    event SampleRecipientPreCall();
-    event SampleRecipientPostCall(bool success, uint actualCharge, bytes32 preRetVal);
-
-    function acceptRelayedCall(
-        GSNTypes.RelayRequest calldata relayRequest,
-        bytes calldata approvalData,
-        uint256 maxPossibleCharge
-    )
-    external
-    override
-    virtual
-    view
-    returns (bytes memory) {
-        (relayRequest, approvalData, maxPossibleCharge);
-        return "";
-    }
-
-    function preRelayedCall(
-        bytes calldata context
-    )
-    external
-    override
-    virtual
-    relayHubOnly
-    returns (bytes32) {
-        (context);
-        emit SampleRecipientPreCall();
-        return bytes32(uint(123456));
-    }
-
-    function postRelayedCall(
-        bytes calldata context,
-        bool success,
-        bytes32 preRetVal,
-        uint256 gasUseWithoutPost,
-        GSNTypes.GasData calldata gasData
-    )
-    external
-    override
-    virtual
-    relayHubOnly
-    {
-        (context, gasUseWithoutPost, gasData);
-        emit SampleRecipientPostCall(success, gasUseWithoutPost, preRetVal);
-    }
-
-    // TODO: this 'overrides' existing setRelayHub method
-    function setHub(IRelayHub _relayHub) public {
-        relayHub = _relayHub;
-    }
-
-    function deposit() public payable {
-        require(address(relayHub) != address(0), "relay hub address not set");
-        relayHub.depositFor.value(msg.value)(address(this));
-    }
-
-    function withdraw(address payable destination) public {
-        require(address(relayHub) != address(0), "relay hub address not set");
-        uint256 amount = relayHub.balanceOf(address(this));
-        relayHub.withdraw(amount, destination);
-    }
-}
diff --git a/node_modules/@opengsn/gsn/contracts/test/TestPaymasterOwnerSignature.sol b/node_modules/@opengsn/gsn/contracts/test/TestPaymasterOwnerSignature.sol
deleted file mode 100644
index ca8c73f..0000000
--- a/node_modules/@opengsn/gsn/contracts/test/TestPaymasterOwnerSignature.sol
+++ /dev/null
@@ -1,31 +0,0 @@
-pragma solidity ^0.6.2;
-pragma experimental ABIEncoderV2;
-
-import "openzeppelin-solidity/contracts/cryptography/ECDSA.sol";
-
-import "./TestPaymasterEverythingAccepted.sol";
-
-contract TestPaymasterOwnerSignature is TestPaymasterEverythingAccepted {
-    using ECDSA for bytes32;
-
-    /**
-     * This demonstrates how dapps can provide an off-chain signatures to relayed transactions.
-     */
-    function acceptRelayedCall(
-        GSNTypes.RelayRequest calldata relayRequest,
-        bytes calldata approvalData,
-        uint256 maxPossibleCharge
-    )
-    external
-    override
-    view
-    returns (bytes memory) {
-        (maxPossibleCharge);
-        address signer =
-            keccak256(abi.encodePacked("I approve", relayRequest.relayData.senderAddress))
-            .toEthSignedMessageHash()
-            .recover(approvalData);
-        require(signer == owner(), "test: not approved");
-        return "";
-    }
-}
diff --git a/node_modules/@opengsn/gsn/contracts/test/TestPaymasterPreconfiguredApproval.sol b/node_modules/@opengsn/gsn/contracts/test/TestPaymasterPreconfiguredApproval.sol
deleted file mode 100644
index e9344c2..0000000
--- a/node_modules/@opengsn/gsn/contracts/test/TestPaymasterPreconfiguredApproval.sol
+++ /dev/null
@@ -1,29 +0,0 @@
-pragma solidity ^0.6.2;
-pragma experimental ABIEncoderV2;
-
-import "./TestPaymasterEverythingAccepted.sol";
-
-contract TestPaymasterPreconfiguredApproval is TestPaymasterEverythingAccepted {
-
-    bytes public expectedApprovalData;
-
-    function setExpectedApprovalData(bytes memory val) public {
-        expectedApprovalData = val;
-    }
-
-    function acceptRelayedCall(
-        GSNTypes.RelayRequest calldata relayRequest,
-        bytes calldata approvalData,
-        uint256 maxPossibleCharge
-    )
-    external
-    override
-    view
-    returns (bytes memory) {
-        (relayRequest, approvalData, maxPossibleCharge);
-        require(keccak256(expectedApprovalData) == keccak256(approvalData),
-            string(abi.encodePacked(
-                "test: unexpected approvalData: '", approvalData, "' instead of '", expectedApprovalData, "'")));
-        return "";
-    }
-}
diff --git a/node_modules/@opengsn/gsn/contracts/test/TestPaymasterStoreContext.sol b/node_modules/@opengsn/gsn/contracts/test/TestPaymasterStoreContext.sol
deleted file mode 100644
index 4f4b1ba..0000000
--- a/node_modules/@opengsn/gsn/contracts/test/TestPaymasterStoreContext.sol
+++ /dev/null
@@ -1,96 +0,0 @@
-pragma solidity ^0.6.2;
-pragma experimental ABIEncoderV2;
-
-import "./TestPaymasterEverythingAccepted.sol";
-
-contract TestPaymasterStoreContext is TestPaymasterEverythingAccepted {
-
-    event SampleRecipientPreCallWithValues(
-        address relay,
-        address from,
-        bytes encodedFunction,
-        uint256 baseRelayFee,
-        uint256 pctRelayFee,
-        uint256 gasPrice,
-        uint256 gasLimit,
-        uint256 nonce,
-        bytes approvalData,
-        uint256 maxPossibleGas
-    );
-
-    event SampleRecipientPostCallWithValues(
-        address relay,
-        address from,
-        bytes encodedFunction,
-        uint256 baseRelayFee,
-        uint256 pctRelayFee,
-        uint256 gasPrice,
-        uint256 gasLimit,
-        uint256 nonce,
-        bytes approvalData,
-        uint256 maxPossibleGas
-    );
-
-    /**
-     * This demonstrates how acceptRelayedCall can return 'context' data for reuse in preRelayedCall/postRelayedCall.
-     */
-    function acceptRelayedCall(
-        GSNTypes.RelayRequest calldata relayRequest,
-        bytes calldata approvalData,
-        uint256 maxPossibleGas
-    )
-    external
-    override
-    view
-    returns (bytes memory) {
-        return abi.encode(
-            relayRequest.relayData.relayWorker,
-            relayRequest.relayData.senderAddress,
-            relayRequest.encodedFunction,
-            relayRequest.gasData.baseRelayFee,
-            relayRequest.gasData.pctRelayFee,
-            relayRequest.gasData.gasPrice,
-            relayRequest.gasData.gasLimit,
-            relayRequest.relayData.senderNonce,
-            approvalData,
-            maxPossibleGas);
-    }
-
-    function preRelayedCall(bytes calldata context)
-    external
-    override
-    relayHubOnly
-    returns (bytes32) {
-        (
-        address relay, address from, bytes memory encodedFunction,
-        uint256 baseRelayFee, uint256 pctRelayFee, uint256 gasPrice, uint256 gasLimit,
-        uint256 nonce, bytes memory approvalData, uint256 maxPossibleGas) =
-            abi.decode(context, (address, address, bytes, uint256, uint256, uint256, uint256, uint256, bytes, uint256));
-        emit SampleRecipientPreCallWithValues(
-            relay, from, encodedFunction, baseRelayFee, pctRelayFee,
-                gasPrice, gasLimit, nonce, approvalData, maxPossibleGas);
-        return 0;
-    }
-
-    function postRelayedCall(
-        bytes calldata context,
-        bool success,
-        bytes32 preRetVal,
-        uint256 gasUseWithoutPost,
-        GSNTypes.GasData calldata gasData
-    )
-    external
-    override
-    relayHubOnly
-    {
-        (context, success, preRetVal, gasUseWithoutPost, gasData);
-        (
-        address relay, address from, bytes memory encodedFunction,
-        uint256 baseRelayFee, uint256 pctRelayFee, uint256 gasPrice, uint256 gasLimit,
-        uint256 nonce, bytes memory approvalData, uint256 maxPossibleGas) =
-            abi.decode(context, (address, address, bytes, uint256, uint256, uint256, uint256, uint256, bytes, uint256));
-        emit SampleRecipientPostCallWithValues(
-            relay, from, encodedFunction, baseRelayFee, pctRelayFee, gasPrice,
-            gasLimit, nonce, approvalData, maxPossibleGas);
-    }
-}
diff --git a/node_modules/@opengsn/gsn/contracts/test/TestPaymasterVariableGasLimits.sol b/node_modules/@opengsn/gsn/contracts/test/TestPaymasterVariableGasLimits.sol
deleted file mode 100644
index 16006b6..0000000
--- a/node_modules/@opengsn/gsn/contracts/test/TestPaymasterVariableGasLimits.sol
+++ /dev/null
@@ -1,61 +0,0 @@
-pragma solidity ^0.6.2;
-pragma experimental ABIEncoderV2;
-
-import "./TestPaymasterEverythingAccepted.sol";
-
-contract TestPaymasterVariableGasLimits is TestPaymasterEverythingAccepted {
-
-    event SampleRecipientPreCallWithValues(
-        uint256 gasleft,
-        uint256 arcGasleft,
-        uint256 maxPossibleGas
-    );
-
-    event SampleRecipientPostCallWithValues(
-        uint256 gasleft,
-        uint256 gasUseWithoutPost
-    );
-
-    function acceptRelayedCall(
-        GSNTypes.RelayRequest calldata relayRequest,
-        bytes calldata approvalData,
-        uint256 maxPossibleGas
-    )
-    external
-    override
-    view
-    returns (bytes memory) {
-        (relayRequest, approvalData);
-        return abi.encode(
-            gasleft(),
-            maxPossibleGas);
-    }
-
-    function preRelayedCall(bytes calldata context)
-    external
-    override
-    relayHubOnly
-    returns (bytes32) {
-        (
-        uint256 arcGasleft, uint256 maxPossibleGas) =
-            abi.decode(context, (uint256, uint256));
-        emit SampleRecipientPreCallWithValues(
-            gasleft(), arcGasleft, maxPossibleGas);
-        return 0;
-    }
-
-    function postRelayedCall(
-        bytes calldata context,
-        bool success,
-        bytes32 preRetVal,
-        uint256 gasUseWithoutPost,
-        GSNTypes.GasData calldata gasData
-    )
-    external
-    override
-    relayHubOnly
-    {
-        (context, success, preRetVal, gasUseWithoutPost, gasData);
-        emit SampleRecipientPostCallWithValues(gasleft(), gasUseWithoutPost);
-    }
-}
diff --git a/node_modules/@opengsn/gsn/contracts/test/TestProxy.sol b/node_modules/@opengsn/gsn/contracts/test/TestProxy.sol
deleted file mode 100644
index 4e19da6..0000000
--- a/node_modules/@opengsn/gsn/contracts/test/TestProxy.sol
+++ /dev/null
@@ -1,33 +0,0 @@
-/* solhint-disable avoid-tx-origin */
-pragma solidity ^0.6.2;
-
-import "../BaseRelayRecipient.sol";
-import "openzeppelin-solidity/contracts/access/Ownable.sol";
-
-contract TestProxy is BaseRelayRecipient, Ownable  {
-
-    constructor(address forwarder) public {
-        trustedForwarder = forwarder;
-    }
-
-    function isOwner() public view returns (bool) {
-        return _msgSender() == owner();
-    }
-
-    event Test(address _msgSender, address msgSender);
-    //not a proxy method; just for testing.
-    function test() public {
-        emit Test(_msgSender(), msg.sender);
-    }
-
-    function execute(address target, bytes calldata func) external onlyOwner {
-
-        //solhint-disable-next-line
-        (bool success, bytes memory ret) = target.call(func);
-        require(success, string(ret));
-    }
-
-    function _msgSender() internal override(Context, BaseRelayRecipient) view returns (address payable) {
-        return BaseRelayRecipient._msgSender();
-    }
-}
diff --git a/node_modules/@opengsn/gsn/contracts/test/TestRecipient.sol b/node_modules/@opengsn/gsn/contracts/test/TestRecipient.sol
deleted file mode 100644
index ea10648..0000000
--- a/node_modules/@opengsn/gsn/contracts/test/TestRecipient.sol
+++ /dev/null
@@ -1,52 +0,0 @@
-/* solhint-disable avoid-tx-origin */
-pragma solidity ^0.6.2;
-
-import "../utils/GsnUtils.sol";
-import "../BaseRelayRecipient.sol";
-import "./TestPaymasterConfigurableMisbehavior.sol";
-import "../TrustedForwarder.sol";
-
-contract TestRecipient is BaseRelayRecipient {
-
-    constructor() public {
-        //should be a singleton, since Paymaster should (eventually) trust it.
-        trustedForwarder = address(new TrustedForwarder());
-    }
-
-    event Reverting(string message);
-
-    function testRevert() public {
-        require(address(this) == address(0), "always fail");
-        emit Reverting("if you see this revert failed...");
-    }
-
-    address payable public paymaster;
-
-    function setWithdrawDuringRelayedCall(address payable _paymaster) public {
-        paymaster = _paymaster;
-    }
-
-    // solhint-disable-next-line no-empty-blocks
-    receive() external payable {}
-
-    event SampleRecipientEmitted(string message, address realSender, address msgSender, address origin);
-
-    function emitMessage(string memory message) public {
-        if (paymaster != address(0)) {
-            withdrawAllBalance();
-        }
-
-        emit SampleRecipientEmitted(message, _msgSender(), msg.sender, tx.origin);
-    }
-
-    function withdrawAllBalance() public {
-        TestPaymasterConfigurableMisbehavior(paymaster).withdrawAllBalance();
-    }
-
-    // solhint-disable-next-line no-empty-blocks
-    function dontEmitMessage(string memory message) public {}
-
-    function emitMessageNoParams() public {
-        emit SampleRecipientEmitted("Method with no parameters", _msgSender(), msg.sender, tx.origin);
-    }
-}
diff --git a/node_modules/@opengsn/gsn/contracts/test/TestRecipientUtils.sol b/node_modules/@opengsn/gsn/contracts/test/TestRecipientUtils.sol
deleted file mode 100644
index 1565c87..0000000
--- a/node_modules/@opengsn/gsn/contracts/test/TestRecipientUtils.sol
+++ /dev/null
@@ -1,32 +0,0 @@
-pragma solidity ^0.6.2;
-
-import "../utils/GsnUtils.sol";
-import "../interfaces/IRelayHub.sol";
-
-contract TestRecipientUtils {
-
-    event Unused();
-    function testFunc(uint, string memory, uint, bytes memory) public {
-        emit Unused();  //just to avoid warnings..
-    }
-
-    // solhint-disable-next-line no-empty-blocks
-    receive() external payable {}
-
-    /****** these methods are internal in 'GsnUtils' and cannot be accessed from JS *******/
-
-    function getParam(bytes memory msgData, uint index) public pure returns (uint) {
-        return GsnUtils.getParam(msgData, index);
-    }
-
-    function getMethodSig(bytes memory msgData) public pure returns (bytes4) {
-        return GsnUtils.getMethodSig(msgData);
-    }
-
-    function getBytesParam(bytes memory msgData, uint index) public pure returns (bytes memory ret) {
-        return GsnUtils.getBytesParam(msgData, index);
-    }
-    function getStringParam(bytes memory msgData, uint index) public pure returns (string memory) {
-        return GsnUtils.getStringParam(msgData, index);
-    }
-}
diff --git a/node_modules/@opengsn/gsn/contracts/test/TestUniswap.sol b/node_modules/@opengsn/gsn/contracts/test/TestUniswap.sol
deleted file mode 100644
index 76e0720..0000000
--- a/node_modules/@opengsn/gsn/contracts/test/TestUniswap.sol
+++ /dev/null
@@ -1,65 +0,0 @@
-pragma solidity ^0.6.2;
-
-import "openzeppelin-solidity/contracts/token/ERC20/IERC20.sol";
-import "openzeppelin-solidity/contracts/token/ERC20/ERC20.sol";
-import "../paymaster/IUniswap.sol";
-
-contract TestToken is ERC20("Test Token", "TOK") {
-
-    function mint(uint amount) public {
-        _mint(msg.sender, amount);
-    }
-}
-
-//naive, no-calculation swapper.
-//- the exchange rate is fixed at construction
-//- mints new tokens at will...
-contract TestUniswap is IUniswap {
-    IERC20 public token;
-    uint public rateMult;
-    uint public rateDiv;
-
-    constructor(uint _rateMult, uint _rateDiv) public payable {
-        token = new TestToken();
-        rateMult = _rateMult;
-        rateDiv = _rateDiv;
-        require(msg.value > 0, "must specify liquidity");
-        require(rateMult != 0 && rateDiv != 0, "bad mult,div");
-    }
-
-    // solhint-disable-next-line no-empty-blocks
-    receive() external payable {}
-
-    function tokenAddress() external override view returns (address out) {
-        return address(token);
-    }
-
-    function tokenToEthSwapOutput(uint256 ethBought, uint256 maxTokens, uint256 deadline) public override returns (uint256 out) {
-        (maxTokens, deadline);
-        uint tokensToSell = getTokenToEthOutputPrice(ethBought);
-        require(address(this).balance > ethBought, "not enough liquidity");
-
-        token.transferFrom(msg.sender, address(this), tokensToSell);
-        msg.sender.transfer(ethBought);
-        return tokensToSell;
-    }
-
-    function getTokenToEthInputPrice(uint256 tokensSold) external override view returns (uint256 out) {
-        return tokensSold * rateDiv / rateMult;
-    }
-
-    function tokenToEthTransferOutput(uint256 ethBought, uint256 maxTokens, uint256 deadline, address payable recipient) external override returns (uint256 out) {
-        (maxTokens, deadline, recipient);
-        require(address(this).balance > ethBought, "not enough liquidity");
-
-        uint tokensToSell = getTokenToEthOutputPrice(ethBought);
-
-        token.transferFrom(msg.sender, address(this), tokensToSell);
-        recipient.transfer(ethBought);
-        return tokensToSell;
-    }
-
-    function getTokenToEthOutputPrice(uint256 ethBought) public override view returns (uint256 out) {
-        return ethBought * rateMult / rateDiv;
-    }
-}
diff --git a/node_modules/@opengsn/gsn/contracts/utils/EIP712Sig.sol b/node_modules/@opengsn/gsn/contracts/utils/EIP712Sig.sol
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/contracts/utils/GSNTypes.sol b/node_modules/@opengsn/gsn/contracts/utils/GSNTypes.sol
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/contracts/utils/GsnUtils.sol b/node_modules/@opengsn/gsn/contracts/utils/GsnUtils.sol
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/contracts/utils/RLPReader.sol b/node_modules/@opengsn/gsn/contracts/utils/RLPReader.sol
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/GSNConfigurator.d.ts b/node_modules/@opengsn/gsn/dist/GSNConfigurator.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/GSNConfigurator.js b/node_modules/@opengsn/gsn/dist/GSNConfigurator.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/GSNConfigurator.js.map b/node_modules/@opengsn/gsn/dist/GSNConfigurator.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/GsnTestEnvironment.d.ts b/node_modules/@opengsn/gsn/dist/GsnTestEnvironment.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/GsnTestEnvironment.js b/node_modules/@opengsn/gsn/dist/GsnTestEnvironment.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/GsnTestEnvironment.js.map b/node_modules/@opengsn/gsn/dist/GsnTestEnvironment.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/RelayClient.d.ts b/node_modules/@opengsn/gsn/dist/RelayClient.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/RelayClient.js b/node_modules/@opengsn/gsn/dist/RelayClient.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/RelayClient.js.map b/node_modules/@opengsn/gsn/dist/RelayClient.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/RelayProvider.d.ts b/node_modules/@opengsn/gsn/dist/RelayProvider.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/RelayProvider.js b/node_modules/@opengsn/gsn/dist/RelayProvider.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/RelayProvider.js.map b/node_modules/@opengsn/gsn/dist/RelayProvider.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/index.d.ts b/node_modules/@opengsn/gsn/dist/index.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/index.js b/node_modules/@opengsn/gsn/dist/index.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/index.js.map b/node_modules/@opengsn/gsn/dist/index.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/CommandsLogic.d.ts b/node_modules/@opengsn/gsn/dist/src/cli/CommandsLogic.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/CommandsLogic.js b/node_modules/@opengsn/gsn/dist/src/cli/CommandsLogic.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/CommandsLogic.js.map b/node_modules/@opengsn/gsn/dist/src/cli/CommandsLogic.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/StatusLogic.d.ts b/node_modules/@opengsn/gsn/dist/src/cli/StatusLogic.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/StatusLogic.js b/node_modules/@opengsn/gsn/dist/src/cli/StatusLogic.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/StatusLogic.js.map b/node_modules/@opengsn/gsn/dist/src/cli/StatusLogic.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-deploy.d.ts b/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-deploy.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-deploy.js b/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-deploy.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-deploy.js.map b/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-deploy.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-paymaster-balance.d.ts b/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-paymaster-balance.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-paymaster-balance.js b/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-paymaster-balance.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-paymaster-balance.js.map b/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-paymaster-balance.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-paymaster-fund.d.ts b/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-paymaster-fund.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-paymaster-fund.js b/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-paymaster-fund.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-paymaster-fund.js.map b/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-paymaster-fund.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-relayer-register.d.ts b/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-relayer-register.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-relayer-register.js b/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-relayer-register.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-relayer-register.js.map b/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-relayer-register.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-relayer-run.d.ts b/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-relayer-run.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-relayer-run.js b/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-relayer-run.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-relayer-run.js.map b/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-relayer-run.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-start.d.ts b/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-start.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-start.js b/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-start.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-start.js.map b/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-start.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-status.d.ts b/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-status.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-status.js b/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-status.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-status.js.map b/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn-status.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn.d.ts b/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn.js.map b/node_modules/@opengsn/gsn/dist/src/cli/commands/gsn.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/compiled/Penalizer.json b/node_modules/@opengsn/gsn/dist/src/cli/compiled/Penalizer.json
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/compiled/RelayHub.json b/node_modules/@opengsn/gsn/dist/src/cli/compiled/RelayHub.json
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/compiled/StakeManager.json b/node_modules/@opengsn/gsn/dist/src/cli/compiled/StakeManager.json
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/compiled/TestPaymasterEverythingAccepted.json b/node_modules/@opengsn/gsn/dist/src/cli/compiled/TestPaymasterEverythingAccepted.json
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/compiled/TrustedForwarder.json b/node_modules/@opengsn/gsn/dist/src/cli/compiled/TrustedForwarder.json
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/utils.d.ts b/node_modules/@opengsn/gsn/dist/src/cli/utils.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/utils.js b/node_modules/@opengsn/gsn/dist/src/cli/utils.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/cli/utils.js.map b/node_modules/@opengsn/gsn/dist/src/cli/utils.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/EIP712/Eip712Helper.d.ts b/node_modules/@opengsn/gsn/dist/src/common/EIP712/Eip712Helper.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/EIP712/Eip712Helper.js b/node_modules/@opengsn/gsn/dist/src/common/EIP712/Eip712Helper.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/EIP712/Eip712Helper.js.map b/node_modules/@opengsn/gsn/dist/src/common/EIP712/Eip712Helper.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/EIP712/GasData.d.ts b/node_modules/@opengsn/gsn/dist/src/common/EIP712/GasData.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/EIP712/GasData.js b/node_modules/@opengsn/gsn/dist/src/common/EIP712/GasData.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/EIP712/GasData.js.map b/node_modules/@opengsn/gsn/dist/src/common/EIP712/GasData.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/EIP712/RelayData.d.ts b/node_modules/@opengsn/gsn/dist/src/common/EIP712/RelayData.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/EIP712/RelayData.js b/node_modules/@opengsn/gsn/dist/src/common/EIP712/RelayData.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/EIP712/RelayData.js.map b/node_modules/@opengsn/gsn/dist/src/common/EIP712/RelayData.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/EIP712/RelayRequest.d.ts b/node_modules/@opengsn/gsn/dist/src/common/EIP712/RelayRequest.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/EIP712/RelayRequest.js b/node_modules/@opengsn/gsn/dist/src/common/EIP712/RelayRequest.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/EIP712/RelayRequest.js.map b/node_modules/@opengsn/gsn/dist/src/common/EIP712/RelayRequest.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/ErrorReplacerJSON.d.ts b/node_modules/@opengsn/gsn/dist/src/common/ErrorReplacerJSON.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/ErrorReplacerJSON.js b/node_modules/@opengsn/gsn/dist/src/common/ErrorReplacerJSON.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/ErrorReplacerJSON.js.map b/node_modules/@opengsn/gsn/dist/src/common/ErrorReplacerJSON.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/PingResponse.d.ts b/node_modules/@opengsn/gsn/dist/src/common/PingResponse.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/PingResponse.js b/node_modules/@opengsn/gsn/dist/src/common/PingResponse.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/PingResponse.js.map b/node_modules/@opengsn/gsn/dist/src/common/PingResponse.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/interfaces/IPaymaster.d.ts b/node_modules/@opengsn/gsn/dist/src/common/interfaces/IPaymaster.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/interfaces/IPaymaster.js b/node_modules/@opengsn/gsn/dist/src/common/interfaces/IPaymaster.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/interfaces/IPaymaster.js.map b/node_modules/@opengsn/gsn/dist/src/common/interfaces/IPaymaster.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/interfaces/IPaymaster.json b/node_modules/@opengsn/gsn/dist/src/common/interfaces/IPaymaster.json
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/interfaces/IRelayHub.d.ts b/node_modules/@opengsn/gsn/dist/src/common/interfaces/IRelayHub.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/interfaces/IRelayHub.js b/node_modules/@opengsn/gsn/dist/src/common/interfaces/IRelayHub.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/interfaces/IRelayHub.js.map b/node_modules/@opengsn/gsn/dist/src/common/interfaces/IRelayHub.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/interfaces/IRelayHub.json b/node_modules/@opengsn/gsn/dist/src/common/interfaces/IRelayHub.json
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/interfaces/IRelayRecipient.d.ts b/node_modules/@opengsn/gsn/dist/src/common/interfaces/IRelayRecipient.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/interfaces/IRelayRecipient.js b/node_modules/@opengsn/gsn/dist/src/common/interfaces/IRelayRecipient.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/interfaces/IRelayRecipient.js.map b/node_modules/@opengsn/gsn/dist/src/common/interfaces/IRelayRecipient.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/interfaces/IRelayRecipient.json b/node_modules/@opengsn/gsn/dist/src/common/interfaces/IRelayRecipient.json
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/interfaces/IStakeManager.d.ts b/node_modules/@opengsn/gsn/dist/src/common/interfaces/IStakeManager.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/interfaces/IStakeManager.js b/node_modules/@opengsn/gsn/dist/src/common/interfaces/IStakeManager.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/interfaces/IStakeManager.js.map b/node_modules/@opengsn/gsn/dist/src/common/interfaces/IStakeManager.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/interfaces/IStakeManager.json b/node_modules/@opengsn/gsn/dist/src/common/interfaces/IStakeManager.json
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/interfaces/ITrustedForwarder.d.ts b/node_modules/@opengsn/gsn/dist/src/common/interfaces/ITrustedForwarder.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/interfaces/ITrustedForwarder.js b/node_modules/@opengsn/gsn/dist/src/common/interfaces/ITrustedForwarder.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/interfaces/ITrustedForwarder.js.map b/node_modules/@opengsn/gsn/dist/src/common/interfaces/ITrustedForwarder.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/interfaces/ITrustedForwarder.json b/node_modules/@opengsn/gsn/dist/src/common/interfaces/ITrustedForwarder.json
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/utils.d.ts b/node_modules/@opengsn/gsn/dist/src/common/utils.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/utils.js b/node_modules/@opengsn/gsn/dist/src/common/utils.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/common/utils.js.map b/node_modules/@opengsn/gsn/dist/src/common/utils.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/AccountManager.d.ts b/node_modules/@opengsn/gsn/dist/src/relayclient/AccountManager.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/AccountManager.js b/node_modules/@opengsn/gsn/dist/src/relayclient/AccountManager.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/AccountManager.js.map b/node_modules/@opengsn/gsn/dist/src/relayclient/AccountManager.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/ContractInteractor.d.ts b/node_modules/@opengsn/gsn/dist/src/relayclient/ContractInteractor.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/ContractInteractor.js b/node_modules/@opengsn/gsn/dist/src/relayclient/ContractInteractor.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/ContractInteractor.js.map b/node_modules/@opengsn/gsn/dist/src/relayclient/ContractInteractor.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/GSNConfigurator.d.ts b/node_modules/@opengsn/gsn/dist/src/relayclient/GSNConfigurator.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/GSNConfigurator.js b/node_modules/@opengsn/gsn/dist/src/relayclient/GSNConfigurator.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/GSNConfigurator.js.map b/node_modules/@opengsn/gsn/dist/src/relayclient/GSNConfigurator.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/GsnTestEnvironment.d.ts b/node_modules/@opengsn/gsn/dist/src/relayclient/GsnTestEnvironment.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/GsnTestEnvironment.js b/node_modules/@opengsn/gsn/dist/src/relayclient/GsnTestEnvironment.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/GsnTestEnvironment.js.map b/node_modules/@opengsn/gsn/dist/src/relayclient/GsnTestEnvironment.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/HttpClient.d.ts b/node_modules/@opengsn/gsn/dist/src/relayclient/HttpClient.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/HttpClient.js b/node_modules/@opengsn/gsn/dist/src/relayclient/HttpClient.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/HttpClient.js.map b/node_modules/@opengsn/gsn/dist/src/relayclient/HttpClient.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/HttpWrapper.d.ts b/node_modules/@opengsn/gsn/dist/src/relayclient/HttpWrapper.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/HttpWrapper.js b/node_modules/@opengsn/gsn/dist/src/relayclient/HttpWrapper.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/HttpWrapper.js.map b/node_modules/@opengsn/gsn/dist/src/relayclient/HttpWrapper.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/KnownRelaysManager.d.ts b/node_modules/@opengsn/gsn/dist/src/relayclient/KnownRelaysManager.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/KnownRelaysManager.js b/node_modules/@opengsn/gsn/dist/src/relayclient/KnownRelaysManager.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/KnownRelaysManager.js.map b/node_modules/@opengsn/gsn/dist/src/relayclient/KnownRelaysManager.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/RelayClient.d.ts b/node_modules/@opengsn/gsn/dist/src/relayclient/RelayClient.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/RelayClient.js b/node_modules/@opengsn/gsn/dist/src/relayclient/RelayClient.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/RelayClient.js.map b/node_modules/@opengsn/gsn/dist/src/relayclient/RelayClient.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/RelayProvider.d.ts b/node_modules/@opengsn/gsn/dist/src/relayclient/RelayProvider.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/RelayProvider.js b/node_modules/@opengsn/gsn/dist/src/relayclient/RelayProvider.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/RelayProvider.js.map b/node_modules/@opengsn/gsn/dist/src/relayclient/RelayProvider.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/RelaySelectionManager.d.ts b/node_modules/@opengsn/gsn/dist/src/relayclient/RelaySelectionManager.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/RelaySelectionManager.js b/node_modules/@opengsn/gsn/dist/src/relayclient/RelaySelectionManager.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/RelaySelectionManager.js.map b/node_modules/@opengsn/gsn/dist/src/relayclient/RelaySelectionManager.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/RelayedTransactionValidator.d.ts b/node_modules/@opengsn/gsn/dist/src/relayclient/RelayedTransactionValidator.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/RelayedTransactionValidator.js b/node_modules/@opengsn/gsn/dist/src/relayclient/RelayedTransactionValidator.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/RelayedTransactionValidator.js.map b/node_modules/@opengsn/gsn/dist/src/relayclient/RelayedTransactionValidator.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/index.d.ts b/node_modules/@opengsn/gsn/dist/src/relayclient/index.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/index.js b/node_modules/@opengsn/gsn/dist/src/relayclient/index.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/index.js.map b/node_modules/@opengsn/gsn/dist/src/relayclient/index.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/types/Aliases.d.ts b/node_modules/@opengsn/gsn/dist/src/relayclient/types/Aliases.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/types/Aliases.js b/node_modules/@opengsn/gsn/dist/src/relayclient/types/Aliases.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/types/Aliases.js.map b/node_modules/@opengsn/gsn/dist/src/relayclient/types/Aliases.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/types/Environments.d.ts b/node_modules/@opengsn/gsn/dist/src/relayclient/types/Environments.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/types/Environments.js b/node_modules/@opengsn/gsn/dist/src/relayclient/types/Environments.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/types/Environments.js.map b/node_modules/@opengsn/gsn/dist/src/relayclient/types/Environments.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/types/GsnTransactionDetails.d.ts b/node_modules/@opengsn/gsn/dist/src/relayclient/types/GsnTransactionDetails.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/types/GsnTransactionDetails.js b/node_modules/@opengsn/gsn/dist/src/relayclient/types/GsnTransactionDetails.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/types/GsnTransactionDetails.js.map b/node_modules/@opengsn/gsn/dist/src/relayclient/types/GsnTransactionDetails.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/types/RelayFailureInfo.d.ts b/node_modules/@opengsn/gsn/dist/src/relayclient/types/RelayFailureInfo.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/types/RelayFailureInfo.js b/node_modules/@opengsn/gsn/dist/src/relayclient/types/RelayFailureInfo.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/types/RelayFailureInfo.js.map b/node_modules/@opengsn/gsn/dist/src/relayclient/types/RelayFailureInfo.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/types/RelayInfo.d.ts b/node_modules/@opengsn/gsn/dist/src/relayclient/types/RelayInfo.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/types/RelayInfo.js b/node_modules/@opengsn/gsn/dist/src/relayclient/types/RelayInfo.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/types/RelayInfo.js.map b/node_modules/@opengsn/gsn/dist/src/relayclient/types/RelayInfo.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/types/RelayRegisteredEventInfo.d.ts b/node_modules/@opengsn/gsn/dist/src/relayclient/types/RelayRegisteredEventInfo.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/types/RelayRegisteredEventInfo.js b/node_modules/@opengsn/gsn/dist/src/relayclient/types/RelayRegisteredEventInfo.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/types/RelayRegisteredEventInfo.js.map b/node_modules/@opengsn/gsn/dist/src/relayclient/types/RelayRegisteredEventInfo.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/types/TmpRelayTransactionJsonRequest.d.ts b/node_modules/@opengsn/gsn/dist/src/relayclient/types/TmpRelayTransactionJsonRequest.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/types/TmpRelayTransactionJsonRequest.js b/node_modules/@opengsn/gsn/dist/src/relayclient/types/TmpRelayTransactionJsonRequest.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayclient/types/TmpRelayTransactionJsonRequest.js.map b/node_modules/@opengsn/gsn/dist/src/relayclient/types/TmpRelayTransactionJsonRequest.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayserver/HttpServer.d.ts b/node_modules/@opengsn/gsn/dist/src/relayserver/HttpServer.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayserver/HttpServer.js b/node_modules/@opengsn/gsn/dist/src/relayserver/HttpServer.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayserver/HttpServer.js.map b/node_modules/@opengsn/gsn/dist/src/relayserver/HttpServer.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayserver/KeyManager.d.ts b/node_modules/@opengsn/gsn/dist/src/relayserver/KeyManager.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayserver/KeyManager.js b/node_modules/@opengsn/gsn/dist/src/relayserver/KeyManager.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayserver/KeyManager.js.map b/node_modules/@opengsn/gsn/dist/src/relayserver/KeyManager.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayserver/RelayServer.d.ts b/node_modules/@opengsn/gsn/dist/src/relayserver/RelayServer.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayserver/RelayServer.js b/node_modules/@opengsn/gsn/dist/src/relayserver/RelayServer.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayserver/RelayServer.js.map b/node_modules/@opengsn/gsn/dist/src/relayserver/RelayServer.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayserver/TxStoreManager.d.ts b/node_modules/@opengsn/gsn/dist/src/relayserver/TxStoreManager.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayserver/TxStoreManager.js b/node_modules/@opengsn/gsn/dist/src/relayserver/TxStoreManager.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayserver/TxStoreManager.js.map b/node_modules/@opengsn/gsn/dist/src/relayserver/TxStoreManager.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayserver/runServer.d.ts b/node_modules/@opengsn/gsn/dist/src/relayserver/runServer.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayserver/runServer.js b/node_modules/@opengsn/gsn/dist/src/relayserver/runServer.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/relayserver/runServer.js.map b/node_modules/@opengsn/gsn/dist/src/relayserver/runServer.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/webtools/contractmanager.d.ts b/node_modules/@opengsn/gsn/dist/src/webtools/contractmanager.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/webtools/contractmanager.js b/node_modules/@opengsn/gsn/dist/src/webtools/contractmanager.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/webtools/contractmanager.js.map b/node_modules/@opengsn/gsn/dist/src/webtools/contractmanager.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/webtools/relaymanager.d.ts b/node_modules/@opengsn/gsn/dist/src/webtools/relaymanager.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/webtools/relaymanager.js b/node_modules/@opengsn/gsn/dist/src/webtools/relaymanager.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/webtools/relaymanager.js.map b/node_modules/@opengsn/gsn/dist/src/webtools/relaymanager.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/webtools/utils.d.ts b/node_modules/@opengsn/gsn/dist/src/webtools/utils.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/webtools/utils.js b/node_modules/@opengsn/gsn/dist/src/webtools/utils.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/webtools/utils.js.map b/node_modules/@opengsn/gsn/dist/src/webtools/utils.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/webtools/webtools.d.ts b/node_modules/@opengsn/gsn/dist/src/webtools/webtools.d.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/webtools/webtools.js b/node_modules/@opengsn/gsn/dist/src/webtools/webtools.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/src/webtools/webtools.js.map b/node_modules/@opengsn/gsn/dist/src/webtools/webtools.js.map
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/dist/types/index.d.ts b/node_modules/@opengsn/gsn/dist/types/index.d.ts
new file mode 100755
index 0000000..5aec39b
--- /dev/null
+++ b/node_modules/@opengsn/gsn/dist/types/index.d.ts
@@ -0,0 +1,4784 @@
+/* Generated by ts-generator ver. 0.0.8 */
+/* tslint:disable */
+
+/// <reference types="@openeth/truffle-typings" />
+import BN from "bn.js";
+
+export interface BasePaymasterContract
+  extends Truffle.Contract<BasePaymasterInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<BasePaymasterInstance>;
+}
+
+export interface BaseRelayRecipientContract
+  extends Truffle.Contract<BaseRelayRecipientInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<BaseRelayRecipientInstance>;
+}
+
+export interface EIP712SigContract extends Truffle.Contract<EIP712SigInstance> {
+  "new"(
+    verifier: string | BN,
+    meta?: Truffle.TransactionDetails
+  ): Promise<EIP712SigInstance>;
+}
+
+export interface ERC20Contract extends Truffle.Contract<ERC20Instance> {
+  "new"(
+    name: string,
+    symbol: string,
+    meta?: Truffle.TransactionDetails
+  ): Promise<ERC20Instance>;
+}
+
+export interface IERC20Contract extends Truffle.Contract<IERC20Instance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<IERC20Instance>;
+}
+
+export interface IPaymasterContract
+  extends Truffle.Contract<IPaymasterInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<IPaymasterInstance>;
+}
+
+export interface IRelayHubContract extends Truffle.Contract<IRelayHubInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<IRelayHubInstance>;
+}
+
+export interface IRelayRecipientContract
+  extends Truffle.Contract<IRelayRecipientInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<IRelayRecipientInstance>;
+}
+
+export interface IStakeManagerContract
+  extends Truffle.Contract<IStakeManagerInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<IStakeManagerInstance>;
+}
+
+export interface ITrustedForwarderContract
+  extends Truffle.Contract<ITrustedForwarderInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<ITrustedForwarderInstance>;
+}
+
+export interface IUniswapContract extends Truffle.Contract<IUniswapInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<IUniswapInstance>;
+}
+
+export interface MigrationsContract
+  extends Truffle.Contract<MigrationsInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<MigrationsInstance>;
+}
+
+export interface OwnableContract extends Truffle.Contract<OwnableInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<OwnableInstance>;
+}
+
+export interface PayableWithEmitContract
+  extends Truffle.Contract<PayableWithEmitInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<PayableWithEmitInstance>;
+}
+
+export interface PenalizerContract extends Truffle.Contract<PenalizerInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<PenalizerInstance>;
+}
+
+export interface RelayHubContract extends Truffle.Contract<RelayHubInstance> {
+  "new"(
+    _gtxdatanonzero: number | BN | string,
+    _stakeManager: string | BN,
+    _penalizer: string | BN,
+    meta?: Truffle.TransactionDetails
+  ): Promise<RelayHubInstance>;
+}
+
+export interface StakeManagerContract
+  extends Truffle.Contract<StakeManagerInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<StakeManagerInstance>;
+}
+
+export interface TestPaymasterConfigurableMisbehaviorContract
+  extends Truffle.Contract<TestPaymasterConfigurableMisbehaviorInstance> {
+  "new"(
+    meta?: Truffle.TransactionDetails
+  ): Promise<TestPaymasterConfigurableMisbehaviorInstance>;
+}
+
+export interface TestPaymasterEverythingAcceptedContract
+  extends Truffle.Contract<TestPaymasterEverythingAcceptedInstance> {
+  "new"(
+    meta?: Truffle.TransactionDetails
+  ): Promise<TestPaymasterEverythingAcceptedInstance>;
+}
+
+export interface TestPaymasterOwnerSignatureContract
+  extends Truffle.Contract<TestPaymasterOwnerSignatureInstance> {
+  "new"(
+    meta?: Truffle.TransactionDetails
+  ): Promise<TestPaymasterOwnerSignatureInstance>;
+}
+
+export interface TestPaymasterPreconfiguredApprovalContract
+  extends Truffle.Contract<TestPaymasterPreconfiguredApprovalInstance> {
+  "new"(
+    meta?: Truffle.TransactionDetails
+  ): Promise<TestPaymasterPreconfiguredApprovalInstance>;
+}
+
+export interface TestPaymasterStoreContextContract
+  extends Truffle.Contract<TestPaymasterStoreContextInstance> {
+  "new"(
+    meta?: Truffle.TransactionDetails
+  ): Promise<TestPaymasterStoreContextInstance>;
+}
+
+export interface TestPaymasterVariableGasLimitsContract
+  extends Truffle.Contract<TestPaymasterVariableGasLimitsInstance> {
+  "new"(
+    meta?: Truffle.TransactionDetails
+  ): Promise<TestPaymasterVariableGasLimitsInstance>;
+}
+
+export interface TestProxyContract extends Truffle.Contract<TestProxyInstance> {
+  "new"(
+    forwarder: string | BN,
+    meta?: Truffle.TransactionDetails
+  ): Promise<TestProxyInstance>;
+}
+
+export interface TestRecipientContract
+  extends Truffle.Contract<TestRecipientInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<TestRecipientInstance>;
+}
+
+export interface TestRecipientUtilsContract
+  extends Truffle.Contract<TestRecipientUtilsInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<TestRecipientUtilsInstance>;
+}
+
+export interface TestTokenContract extends Truffle.Contract<TestTokenInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<TestTokenInstance>;
+}
+
+export interface TestUniswapContract
+  extends Truffle.Contract<TestUniswapInstance> {
+  "new"(
+    _rateMult: number | BN | string,
+    _rateDiv: number | BN | string,
+    meta?: Truffle.TransactionDetails
+  ): Promise<TestUniswapInstance>;
+}
+
+export interface TokenGasCalculatorContract
+  extends Truffle.Contract<TokenGasCalculatorInstance> {
+  "new"(
+    _gtxdatanonzero: number | BN | string,
+    _stakeManager: string | BN,
+    _penalizer: string | BN,
+    meta?: Truffle.TransactionDetails
+  ): Promise<TokenGasCalculatorInstance>;
+}
+
+export interface TokenPaymasterContract
+  extends Truffle.Contract<TokenPaymasterInstance> {
+  "new"(
+    _uniswap: string | BN,
+    meta?: Truffle.TransactionDetails
+  ): Promise<TokenPaymasterInstance>;
+}
+
+export interface TrustedBatchForwarderContract
+  extends Truffle.Contract<TrustedBatchForwarderInstance> {
+  "new"(
+    meta?: Truffle.TransactionDetails
+  ): Promise<TrustedBatchForwarderInstance>;
+}
+
+export interface TrustedForwarderContract
+  extends Truffle.Contract<TrustedForwarderInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<TrustedForwarderInstance>;
+}
+
+export interface BasePaymasterInstance extends Truffle.ContractInstance {
+  acceptRelayedCall(
+    relayRequest: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    approvalData: string,
+    maxPossibleGas: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<string>;
+
+  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  postRelayedCall: {
+    (
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  preRelayedCall: {
+    (context: string, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    sendTransaction(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  renounceOwnership: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  transferOwnership: {
+    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  getHubAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  getGasLimits(
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<{
+    acceptRelayedCallGasLimit: string;
+    preRelayedCallGasLimit: string;
+    postRelayedCallGasLimit: string;
+  }>;
+
+  setRelayHub: {
+    (hub: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  getRelayHubDeposit(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  withdrawRelayHubDepositTo: {
+    (
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface BaseRelayRecipientInstance extends Truffle.ContractInstance {
+  getTrustedForwarder(txDetails?: Truffle.TransactionDetails): Promise<string>;
+}
+
+export interface EIP712SigInstance extends Truffle.ContractInstance {
+  CALLDATA_TYPEHASH(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  DOMAIN_SEPARATOR(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  EIP712DOMAIN_TYPEHASH(
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<string>;
+
+  RELAYDATA_TYPEHASH(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  RELAY_REQUEST_TYPEHASH(
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<string>;
+
+  verify(
+    req: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    signature: string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<boolean>;
+}
+
+export interface ERC20Instance extends Truffle.ContractInstance {
+  name(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  decimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  balanceOf(
+    account: string | BN,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  transfer: {
+    (
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<boolean>;
+    sendTransaction(
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  allowance(
+    owner: string | BN,
+    spender: string | BN,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  approve: {
+    (
+      spender: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      spender: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<boolean>;
+    sendTransaction(
+      spender: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      spender: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  transferFrom: {
+    (
+      sender: string | BN,
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      sender: string | BN,
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<boolean>;
+    sendTransaction(
+      sender: string | BN,
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      sender: string | BN,
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  increaseAllowance: {
+    (
+      spender: string | BN,
+      addedValue: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      spender: string | BN,
+      addedValue: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<boolean>;
+    sendTransaction(
+      spender: string | BN,
+      addedValue: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      spender: string | BN,
+      addedValue: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  decreaseAllowance: {
+    (
+      spender: string | BN,
+      subtractedValue: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      spender: string | BN,
+      subtractedValue: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<boolean>;
+    sendTransaction(
+      spender: string | BN,
+      subtractedValue: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      spender: string | BN,
+      subtractedValue: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface IERC20Instance extends Truffle.ContractInstance {
+  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  balanceOf(
+    account: string | BN,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  transfer: {
+    (
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<boolean>;
+    sendTransaction(
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  allowance(
+    owner: string | BN,
+    spender: string | BN,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  approve: {
+    (
+      spender: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      spender: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<boolean>;
+    sendTransaction(
+      spender: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      spender: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  transferFrom: {
+    (
+      sender: string | BN,
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      sender: string | BN,
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<boolean>;
+    sendTransaction(
+      sender: string | BN,
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      sender: string | BN,
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface IPaymasterInstance extends Truffle.ContractInstance {
+  getHubAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  getRelayHubDeposit(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  getGasLimits(
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<{
+    acceptRelayedCallGasLimit: string;
+    preRelayedCallGasLimit: string;
+    postRelayedCallGasLimit: string;
+  }>;
+
+  acceptRelayedCall(
+    relayRequest: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    approvalData: string,
+    maxPossibleGas: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<string>;
+
+  preRelayedCall: {
+    (context: string, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    sendTransaction(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  postRelayedCall: {
+    (
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface IRelayHubInstance extends Truffle.ContractInstance {
+  getStakeManager(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  addRelayWorkers: {
+    (
+      newRelayWorkers: (string | BN)[],
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      newRelayWorkers: (string | BN)[],
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      newRelayWorkers: (string | BN)[],
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      newRelayWorkers: (string | BN)[],
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  registerRelayServer: {
+    (
+      baseRelayFee: number | BN | string,
+      pctRelayFee: number | BN | string,
+      url: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      baseRelayFee: number | BN | string,
+      pctRelayFee: number | BN | string,
+      url: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      baseRelayFee: number | BN | string,
+      pctRelayFee: number | BN | string,
+      url: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      baseRelayFee: number | BN | string,
+      pctRelayFee: number | BN | string,
+      url: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  depositFor: {
+    (target: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  balanceOf(
+    target: string | BN,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  withdraw: {
+    (
+      amount: number | BN | string,
+      dest: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      amount: number | BN | string,
+      dest: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      amount: number | BN | string,
+      dest: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      amount: number | BN | string,
+      dest: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  canRelay(
+    relayRequest: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    maxPossibleGas: number | BN | string,
+    acceptRelayedCallGasLimit: number | BN | string,
+    signature: string,
+    approvalData: string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<[boolean, string]>;
+
+  relayCall: {
+    (
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      approvalData: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      approvalData: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      approvalData: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      approvalData: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  penalize: {
+    (
+      relayWorker: string | BN,
+      beneficiary: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayWorker: string | BN,
+      beneficiary: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayWorker: string | BN,
+      beneficiary: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayWorker: string | BN,
+      beneficiary: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  getHubOverhead(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  calculateCharge(
+    gasUsed: number | BN | string,
+    gasData: {
+      gasLimit: number | BN | string;
+      gasPrice: number | BN | string;
+      pctRelayFee: number | BN | string;
+      baseRelayFee: number | BN | string;
+    },
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  getVersion(txDetails?: Truffle.TransactionDetails): Promise<string>;
+}
+
+export interface IRelayRecipientInstance extends Truffle.ContractInstance {
+  getTrustedForwarder(txDetails?: Truffle.TransactionDetails): Promise<string>;
+}
+
+export interface IStakeManagerInstance extends Truffle.ContractInstance {
+  stakeForAddress: {
+    (
+      relayManager: string | BN,
+      unstakeDelay: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayManager: string | BN,
+      unstakeDelay: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayManager: string | BN,
+      unstakeDelay: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayManager: string | BN,
+      unstakeDelay: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  unlockStake: {
+    (
+      relayManager: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayManager: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayManager: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayManager: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  withdrawStake: {
+    (
+      relayManager: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayManager: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayManager: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayManager: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  authorizeHub: {
+    (
+      relayManager: string | BN,
+      relayHub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayManager: string | BN,
+      relayHub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayManager: string | BN,
+      relayHub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayManager: string | BN,
+      relayHub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  unauthorizeHub: {
+    (
+      relayManager: string | BN,
+      relayHub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayManager: string | BN,
+      relayHub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayManager: string | BN,
+      relayHub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayManager: string | BN,
+      relayHub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  isRelayManagerStaked(
+    relayManager: string | BN,
+    minAmount: number | BN | string,
+    minUnstakeDelay: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<boolean>;
+
+  penalizeRelayManager: {
+    (
+      relayManager: string | BN,
+      beneficiary: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayManager: string | BN,
+      beneficiary: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayManager: string | BN,
+      beneficiary: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayManager: string | BN,
+      beneficiary: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  getStakeInfo(
+    relayManager: string | BN,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<{
+    stake: string;
+    unstakeDelay: string;
+    withdrawBlock: string;
+    owner: string;
+  }>;
+}
+
+export interface ITrustedForwarderInstance extends Truffle.ContractInstance {
+  verify(
+    req: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    sig: string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<void>;
+
+  verifyAndCall: {
+    (
+      req: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      sig: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      req: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      sig: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<[boolean, string]>;
+    sendTransaction(
+      req: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      sig: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      req: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      sig: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  getNonce(
+    from: string | BN,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+}
+
+export interface IUniswapInstance extends Truffle.ContractInstance {
+  tokenAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  tokenToEthSwapOutput: {
+    (
+      ethBought: number | BN | string,
+      maxTokens: number | BN | string,
+      deadline: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      ethBought: number | BN | string,
+      maxTokens: number | BN | string,
+      deadline: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<BN>;
+    sendTransaction(
+      ethBought: number | BN | string,
+      maxTokens: number | BN | string,
+      deadline: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      ethBought: number | BN | string,
+      maxTokens: number | BN | string,
+      deadline: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  tokenToEthTransferOutput: {
+    (
+      ethBought: number | BN | string,
+      maxTokens: number | BN | string,
+      deadline: number | BN | string,
+      recipient: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      ethBought: number | BN | string,
+      maxTokens: number | BN | string,
+      deadline: number | BN | string,
+      recipient: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<BN>;
+    sendTransaction(
+      ethBought: number | BN | string,
+      maxTokens: number | BN | string,
+      deadline: number | BN | string,
+      recipient: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      ethBought: number | BN | string,
+      maxTokens: number | BN | string,
+      deadline: number | BN | string,
+      recipient: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  getTokenToEthOutputPrice(
+    ethBought: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  getTokenToEthInputPrice(
+    tokensSold: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+}
+
+export interface MigrationsInstance extends Truffle.ContractInstance {
+  last_completed_migration(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  setCompleted: {
+    (
+      completed: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      completed: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      completed: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      completed: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  upgrade: {
+    (newAddress: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      newAddress: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      newAddress: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      newAddress: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface OwnableInstance extends Truffle.ContractInstance {
+  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  renounceOwnership: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  transferOwnership: {
+    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface PayableWithEmitInstance extends Truffle.ContractInstance {
+  getTrustedForwarder(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  doSend: {
+    (target: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface PenalizerInstance extends Truffle.ContractInstance {
+  penalizeRepeatedNonce: {
+    (
+      unsignedTx1: string,
+      signature1: string,
+      unsignedTx2: string,
+      signature2: string,
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      unsignedTx1: string,
+      signature1: string,
+      unsignedTx2: string,
+      signature2: string,
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      unsignedTx1: string,
+      signature1: string,
+      unsignedTx2: string,
+      signature2: string,
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      unsignedTx1: string,
+      signature1: string,
+      unsignedTx2: string,
+      signature2: string,
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  penalizeIllegalTransaction: {
+    (
+      unsignedTx: string,
+      signature: string,
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      unsignedTx: string,
+      signature: string,
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      unsignedTx: string,
+      signature: string,
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      unsignedTx: string,
+      signature: string,
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface RelayHubInstance extends Truffle.ContractInstance {
+  COMMIT_ID(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  GTRANSACTION(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  MAX_WORKER_COUNT(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  eip712sig(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  gtxdatanonzero(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  penalizer(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  stakeManager(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  version(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  getHubOverhead(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  getVersion(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  getStakeManager(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  registerRelayServer: {
+    (
+      baseRelayFee: number | BN | string,
+      pctRelayFee: number | BN | string,
+      url: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      baseRelayFee: number | BN | string,
+      pctRelayFee: number | BN | string,
+      url: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      baseRelayFee: number | BN | string,
+      pctRelayFee: number | BN | string,
+      url: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      baseRelayFee: number | BN | string,
+      pctRelayFee: number | BN | string,
+      url: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  addRelayWorkers: {
+    (
+      newRelayWorkers: (string | BN)[],
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      newRelayWorkers: (string | BN)[],
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      newRelayWorkers: (string | BN)[],
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      newRelayWorkers: (string | BN)[],
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  depositFor: {
+    (target: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  balanceOf(
+    target: string | BN,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  withdraw: {
+    (
+      amount: number | BN | string,
+      dest: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      amount: number | BN | string,
+      dest: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      amount: number | BN | string,
+      dest: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      amount: number | BN | string,
+      dest: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  canRelay(
+    relayRequest: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    maxPossibleGas: number | BN | string,
+    acceptRelayedCallGasLimit: number | BN | string,
+    signature: string,
+    approvalData: string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<[boolean, string]>;
+
+  relayCall: {
+    (
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      approvalData: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      approvalData: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      approvalData: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      approvalData: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  recipientCallsAtomic: {
+    (
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      gasLimits: {
+        acceptRelayedCallGasLimit: number | BN | string;
+        preRelayedCallGasLimit: number | BN | string;
+        postRelayedCallGasLimit: number | BN | string;
+      },
+      totalInitialGas: number | BN | string,
+      calldataGas: number | BN | string,
+      recipientContext: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      gasLimits: {
+        acceptRelayedCallGasLimit: number | BN | string;
+        preRelayedCallGasLimit: number | BN | string;
+        postRelayedCallGasLimit: number | BN | string;
+      },
+      totalInitialGas: number | BN | string,
+      calldataGas: number | BN | string,
+      recipientContext: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<BN>;
+    sendTransaction(
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      gasLimits: {
+        acceptRelayedCallGasLimit: number | BN | string;
+        preRelayedCallGasLimit: number | BN | string;
+        postRelayedCallGasLimit: number | BN | string;
+      },
+      totalInitialGas: number | BN | string,
+      calldataGas: number | BN | string,
+      recipientContext: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      gasLimits: {
+        acceptRelayedCallGasLimit: number | BN | string;
+        preRelayedCallGasLimit: number | BN | string;
+        postRelayedCallGasLimit: number | BN | string;
+      },
+      totalInitialGas: number | BN | string,
+      calldataGas: number | BN | string,
+      recipientContext: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  calculateCharge(
+    gasUsed: number | BN | string,
+    gasData: {
+      gasLimit: number | BN | string;
+      gasPrice: number | BN | string;
+      pctRelayFee: number | BN | string;
+      baseRelayFee: number | BN | string;
+    },
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  penalize: {
+    (
+      relayWorker: string | BN,
+      beneficiary: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayWorker: string | BN,
+      beneficiary: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayWorker: string | BN,
+      beneficiary: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayWorker: string | BN,
+      beneficiary: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface StakeManagerInstance extends Truffle.ContractInstance {
+  authorizedHubs(
+    arg0: string | BN,
+    arg1: string | BN,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  stakes(
+    arg0: string | BN,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<[BN, BN, BN, string]>;
+
+  getStakeInfo(
+    relayManager: string | BN,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<{
+    stake: string;
+    unstakeDelay: string;
+    withdrawBlock: string;
+    owner: string;
+  }>;
+
+  stakeForAddress: {
+    (
+      relayManager: string | BN,
+      unstakeDelay: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayManager: string | BN,
+      unstakeDelay: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayManager: string | BN,
+      unstakeDelay: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayManager: string | BN,
+      unstakeDelay: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  unlockStake: {
+    (
+      relayManager: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayManager: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayManager: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayManager: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  withdrawStake: {
+    (
+      relayManager: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayManager: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayManager: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayManager: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  authorizeHub: {
+    (
+      relayManager: string | BN,
+      relayHub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayManager: string | BN,
+      relayHub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayManager: string | BN,
+      relayHub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayManager: string | BN,
+      relayHub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  unauthorizeHub: {
+    (
+      relayManager: string | BN,
+      relayHub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayManager: string | BN,
+      relayHub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayManager: string | BN,
+      relayHub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayManager: string | BN,
+      relayHub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  isRelayManagerStaked(
+    relayManager: string | BN,
+    minAmount: number | BN | string,
+    minUnstakeDelay: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<boolean>;
+
+  penalizeRelayManager: {
+    (
+      relayManager: string | BN,
+      beneficiary: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayManager: string | BN,
+      beneficiary: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayManager: string | BN,
+      beneficiary: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayManager: string | BN,
+      beneficiary: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface TestPaymasterConfigurableMisbehaviorInstance
+  extends Truffle.ContractInstance {
+  deposit: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  getGasLimits(
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<{
+    acceptRelayedCallGasLimit: string;
+    preRelayedCallGasLimit: string;
+    postRelayedCallGasLimit: string;
+  }>;
+
+  getHubAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  getRelayHubDeposit(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  overspendAcceptGas(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
+
+  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  renounceOwnership: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  returnInvalidErrorCode(
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<boolean>;
+
+  revertPostRelayCall(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
+
+  revertPreRelayCall(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
+
+  setRelayHub: {
+    (hub: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  transferOwnership: {
+    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  withdrawAll: {
+    (destination: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  withdrawDuringPostRelayedCall(
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<boolean>;
+
+  withdrawDuringPreRelayedCall(
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<boolean>;
+
+  withdrawRelayHubDepositTo: {
+    (
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  setWithdrawDuringPostRelayedCall: {
+    (val: boolean, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(val: boolean, txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(
+      val: boolean,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      val: boolean,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  setWithdrawDuringPreRelayedCall: {
+    (val: boolean, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(val: boolean, txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(
+      val: boolean,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      val: boolean,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  setReturnInvalidErrorCode: {
+    (val: boolean, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(val: boolean, txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(
+      val: boolean,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      val: boolean,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  setRevertPostRelayCall: {
+    (val: boolean, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(val: boolean, txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(
+      val: boolean,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      val: boolean,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  setRevertPreRelayCall: {
+    (val: boolean, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(val: boolean, txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(
+      val: boolean,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      val: boolean,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  setOverspendAcceptGas: {
+    (val: boolean, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(val: boolean, txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(
+      val: boolean,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      val: boolean,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  acceptRelayedCall(
+    relayRequest: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    approvalData: string,
+    maxPossibleCharge: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<string>;
+
+  preRelayedCall: {
+    (context: string, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    sendTransaction(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  postRelayedCall: {
+    (
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  withdrawAllBalance: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+}
+
+export interface TestPaymasterEverythingAcceptedInstance
+  extends Truffle.ContractInstance {
+  getGasLimits(
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<{
+    acceptRelayedCallGasLimit: string;
+    preRelayedCallGasLimit: string;
+    postRelayedCallGasLimit: string;
+  }>;
+
+  getHubAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  getRelayHubDeposit(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  renounceOwnership: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  setRelayHub: {
+    (hub: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  transferOwnership: {
+    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  withdrawRelayHubDepositTo: {
+    (
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  acceptRelayedCall(
+    relayRequest: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    approvalData: string,
+    maxPossibleCharge: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<string>;
+
+  preRelayedCall: {
+    (context: string, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    sendTransaction(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  postRelayedCall: {
+    (
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  deposit: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  withdrawAll: {
+    (destination: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface TestPaymasterOwnerSignatureInstance
+  extends Truffle.ContractInstance {
+  deposit: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  getGasLimits(
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<{
+    acceptRelayedCallGasLimit: string;
+    preRelayedCallGasLimit: string;
+    postRelayedCallGasLimit: string;
+  }>;
+
+  getHubAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  getRelayHubDeposit(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  postRelayedCall: {
+    (
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  preRelayedCall: {
+    (context: string, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    sendTransaction(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  renounceOwnership: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  setRelayHub: {
+    (hub: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  transferOwnership: {
+    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  withdrawAll: {
+    (destination: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  withdrawRelayHubDepositTo: {
+    (
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  acceptRelayedCall(
+    relayRequest: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    approvalData: string,
+    maxPossibleCharge: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<string>;
+}
+
+export interface TestPaymasterPreconfiguredApprovalInstance
+  extends Truffle.ContractInstance {
+  deposit: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  expectedApprovalData(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  getGasLimits(
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<{
+    acceptRelayedCallGasLimit: string;
+    preRelayedCallGasLimit: string;
+    postRelayedCallGasLimit: string;
+  }>;
+
+  getHubAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  getRelayHubDeposit(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  postRelayedCall: {
+    (
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  preRelayedCall: {
+    (context: string, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    sendTransaction(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  renounceOwnership: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  setRelayHub: {
+    (hub: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  transferOwnership: {
+    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  withdrawAll: {
+    (destination: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  withdrawRelayHubDepositTo: {
+    (
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  setExpectedApprovalData: {
+    (val: string, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(val: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(
+      val: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      val: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  acceptRelayedCall(
+    relayRequest: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    approvalData: string,
+    maxPossibleCharge: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<string>;
+}
+
+export interface TestPaymasterStoreContextInstance
+  extends Truffle.ContractInstance {
+  deposit: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  getGasLimits(
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<{
+    acceptRelayedCallGasLimit: string;
+    preRelayedCallGasLimit: string;
+    postRelayedCallGasLimit: string;
+  }>;
+
+  getHubAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  getRelayHubDeposit(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  renounceOwnership: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  setRelayHub: {
+    (hub: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  transferOwnership: {
+    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  withdrawAll: {
+    (destination: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  withdrawRelayHubDepositTo: {
+    (
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  acceptRelayedCall(
+    relayRequest: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    approvalData: string,
+    maxPossibleGas: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<string>;
+
+  preRelayedCall: {
+    (context: string, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    sendTransaction(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  postRelayedCall: {
+    (
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface TestPaymasterVariableGasLimitsInstance
+  extends Truffle.ContractInstance {
+  deposit: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  getGasLimits(
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<{
+    acceptRelayedCallGasLimit: string;
+    preRelayedCallGasLimit: string;
+    postRelayedCallGasLimit: string;
+  }>;
+
+  getHubAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  getRelayHubDeposit(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  renounceOwnership: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  setRelayHub: {
+    (hub: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  transferOwnership: {
+    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  withdrawAll: {
+    (destination: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  withdrawRelayHubDepositTo: {
+    (
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  acceptRelayedCall(
+    relayRequest: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    approvalData: string,
+    maxPossibleGas: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<string>;
+
+  preRelayedCall: {
+    (context: string, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    sendTransaction(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  postRelayedCall: {
+    (
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface TestProxyInstance extends Truffle.ContractInstance {
+  getTrustedForwarder(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  renounceOwnership: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  transferOwnership: {
+    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
+
+  test: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  execute: {
+    (
+      target: string | BN,
+      func: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      target: string | BN,
+      func: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      target: string | BN,
+      func: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      target: string | BN,
+      func: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface TestRecipientInstance extends Truffle.ContractInstance {
+  getTrustedForwarder(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  paymaster(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  setTrustedForwarder: {
+    (forwarder: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      forwarder: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      forwarder: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      forwarder: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  testRevert: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  setWithdrawDuringRelayedCall: {
+    (_paymaster: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      _paymaster: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      _paymaster: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      _paymaster: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  emitMessage: {
+    (message: string, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      message: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      message: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      message: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  withdrawAllBalance: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  dontEmitMessage: {
+    (message: string, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      message: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      message: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      message: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  emitMessageNoParams: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+}
+
+export interface TestRecipientUtilsInstance extends Truffle.ContractInstance {
+  testFunc: {
+    (
+      arg0: number | BN | string,
+      arg1: string,
+      arg2: number | BN | string,
+      arg3: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      arg0: number | BN | string,
+      arg1: string,
+      arg2: number | BN | string,
+      arg3: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      arg0: number | BN | string,
+      arg1: string,
+      arg2: number | BN | string,
+      arg3: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      arg0: number | BN | string,
+      arg1: string,
+      arg2: number | BN | string,
+      arg3: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  getParam(
+    msgData: string,
+    index: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  getMethodSig(
+    msgData: string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<string>;
+
+  getBytesParam(
+    msgData: string,
+    index: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<string>;
+
+  getStringParam(
+    msgData: string,
+    index: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<string>;
+}
+
+export interface TestTokenInstance extends Truffle.ContractInstance {
+  allowance(
+    owner: string | BN,
+    spender: string | BN,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  approve: {
+    (
+      spender: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      spender: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<boolean>;
+    sendTransaction(
+      spender: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      spender: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  balanceOf(
+    account: string | BN,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  decimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  decreaseAllowance: {
+    (
+      spender: string | BN,
+      subtractedValue: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      spender: string | BN,
+      subtractedValue: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<boolean>;
+    sendTransaction(
+      spender: string | BN,
+      subtractedValue: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      spender: string | BN,
+      subtractedValue: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  increaseAllowance: {
+    (
+      spender: string | BN,
+      addedValue: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      spender: string | BN,
+      addedValue: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<boolean>;
+    sendTransaction(
+      spender: string | BN,
+      addedValue: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      spender: string | BN,
+      addedValue: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  name(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  transfer: {
+    (
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<boolean>;
+    sendTransaction(
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  transferFrom: {
+    (
+      sender: string | BN,
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      sender: string | BN,
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<boolean>;
+    sendTransaction(
+      sender: string | BN,
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      sender: string | BN,
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  mint: {
+    (
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface TestUniswapInstance extends Truffle.ContractInstance {
+  rateDiv(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  rateMult(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  token(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  tokenAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  tokenToEthSwapOutput: {
+    (
+      ethBought: number | BN | string,
+      maxTokens: number | BN | string,
+      deadline: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      ethBought: number | BN | string,
+      maxTokens: number | BN | string,
+      deadline: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<BN>;
+    sendTransaction(
+      ethBought: number | BN | string,
+      maxTokens: number | BN | string,
+      deadline: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      ethBought: number | BN | string,
+      maxTokens: number | BN | string,
+      deadline: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  getTokenToEthInputPrice(
+    tokensSold: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  tokenToEthTransferOutput: {
+    (
+      ethBought: number | BN | string,
+      maxTokens: number | BN | string,
+      deadline: number | BN | string,
+      recipient: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      ethBought: number | BN | string,
+      maxTokens: number | BN | string,
+      deadline: number | BN | string,
+      recipient: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<BN>;
+    sendTransaction(
+      ethBought: number | BN | string,
+      maxTokens: number | BN | string,
+      deadline: number | BN | string,
+      recipient: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      ethBought: number | BN | string,
+      maxTokens: number | BN | string,
+      deadline: number | BN | string,
+      recipient: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  getTokenToEthOutputPrice(
+    ethBought: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+}
+
+export interface TokenGasCalculatorInstance extends Truffle.ContractInstance {
+  COMMIT_ID(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  GTRANSACTION(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  MAX_WORKER_COUNT(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  addRelayWorkers: {
+    (
+      newRelayWorkers: (string | BN)[],
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      newRelayWorkers: (string | BN)[],
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      newRelayWorkers: (string | BN)[],
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      newRelayWorkers: (string | BN)[],
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  balanceOf(
+    target: string | BN,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  calculateCharge(
+    gasUsed: number | BN | string,
+    gasData: {
+      gasLimit: number | BN | string;
+      gasPrice: number | BN | string;
+      pctRelayFee: number | BN | string;
+      baseRelayFee: number | BN | string;
+    },
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  canRelay(
+    relayRequest: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    maxPossibleGas: number | BN | string,
+    acceptRelayedCallGasLimit: number | BN | string,
+    signature: string,
+    approvalData: string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<[boolean, string]>;
+
+  depositFor: {
+    (target: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  eip712sig(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  getHubOverhead(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  getStakeManager(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  getVersion(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  gtxdatanonzero(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  penalize: {
+    (
+      relayWorker: string | BN,
+      beneficiary: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayWorker: string | BN,
+      beneficiary: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayWorker: string | BN,
+      beneficiary: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayWorker: string | BN,
+      beneficiary: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  penalizer(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  recipientCallsAtomic: {
+    (
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      gasLimits: {
+        acceptRelayedCallGasLimit: number | BN | string;
+        preRelayedCallGasLimit: number | BN | string;
+        postRelayedCallGasLimit: number | BN | string;
+      },
+      totalInitialGas: number | BN | string,
+      calldataGas: number | BN | string,
+      recipientContext: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      gasLimits: {
+        acceptRelayedCallGasLimit: number | BN | string;
+        preRelayedCallGasLimit: number | BN | string;
+        postRelayedCallGasLimit: number | BN | string;
+      },
+      totalInitialGas: number | BN | string,
+      calldataGas: number | BN | string,
+      recipientContext: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<BN>;
+    sendTransaction(
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      gasLimits: {
+        acceptRelayedCallGasLimit: number | BN | string;
+        preRelayedCallGasLimit: number | BN | string;
+        postRelayedCallGasLimit: number | BN | string;
+      },
+      totalInitialGas: number | BN | string,
+      calldataGas: number | BN | string,
+      recipientContext: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      gasLimits: {
+        acceptRelayedCallGasLimit: number | BN | string;
+        preRelayedCallGasLimit: number | BN | string;
+        postRelayedCallGasLimit: number | BN | string;
+      },
+      totalInitialGas: number | BN | string,
+      calldataGas: number | BN | string,
+      recipientContext: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  registerRelayServer: {
+    (
+      baseRelayFee: number | BN | string,
+      pctRelayFee: number | BN | string,
+      url: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      baseRelayFee: number | BN | string,
+      pctRelayFee: number | BN | string,
+      url: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      baseRelayFee: number | BN | string,
+      pctRelayFee: number | BN | string,
+      url: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      baseRelayFee: number | BN | string,
+      pctRelayFee: number | BN | string,
+      url: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  relayCall: {
+    (
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      approvalData: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      approvalData: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      approvalData: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      approvalData: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  renounceOwnership: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  stakeManager(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  transferOwnership: {
+    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  version(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  withdraw: {
+    (
+      amount: number | BN | string,
+      dest: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      amount: number | BN | string,
+      dest: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      amount: number | BN | string,
+      dest: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      amount: number | BN | string,
+      dest: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  calculatePostGas: {
+    (paymaster: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      paymaster: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<[BN, BN]>;
+    sendTransaction(
+      paymaster: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      paymaster: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface TokenPaymasterInstance extends Truffle.ContractInstance {
+  gasUsedByPostWithPreCharge(
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  gasUsedByPostWithoutPreCharge(
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  getGasLimits(
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<{
+    acceptRelayedCallGasLimit: string;
+    preRelayedCallGasLimit: string;
+    postRelayedCallGasLimit: string;
+  }>;
+
+  getHubAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  getRelayHubDeposit(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  renounceOwnership: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  setRelayHub: {
+    (hub: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  token(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  transferOwnership: {
+    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  uniswap(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  withdrawRelayHubDepositTo: {
+    (
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  setPostGasUsage: {
+    (
+      _gasUsedByPostWithPreCharge: number | BN | string,
+      _gasUsedByPostWithoutPreCharge: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      _gasUsedByPostWithPreCharge: number | BN | string,
+      _gasUsedByPostWithoutPreCharge: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      _gasUsedByPostWithPreCharge: number | BN | string,
+      _gasUsedByPostWithoutPreCharge: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      _gasUsedByPostWithPreCharge: number | BN | string,
+      _gasUsedByPostWithoutPreCharge: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  getPayer(
+    relayRequest: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<string>;
+
+  acceptRelayedCall(
+    relayRequest: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    approvalData: string,
+    maxPossibleGas: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<string>;
+
+  preRelayedCall: {
+    (context: string, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    sendTransaction(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  postRelayedCall: {
+    (
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface TrustedBatchForwarderInstance
+  extends Truffle.ContractInstance {
+  getNonce(
+    from: string | BN,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  getTrustedForwarder(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  verify(
+    req: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    sig: string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<void>;
+
+  verifyAndCall: {
+    (
+      req: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      sig: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      req: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      sig: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<[boolean, string]>;
+    sendTransaction(
+      req: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      sig: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      req: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      sig: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  sendBatch: {
+    (
+      targets: (string | BN)[],
+      encodedFunctions: string[],
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      targets: (string | BN)[],
+      encodedFunctions: string[],
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      targets: (string | BN)[],
+      encodedFunctions: string[],
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      targets: (string | BN)[],
+      encodedFunctions: string[],
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface TrustedForwarderInstance extends Truffle.ContractInstance {
+  getNonce(
+    from: string | BN,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  verify(
+    req: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    sig: string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<void>;
+
+  verifyAndCall: {
+    (
+      req: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      sig: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      req: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      sig: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<[boolean, string]>;
+    sendTransaction(
+      req: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      sig: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      req: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      sig: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
diff --git a/node_modules/@opengsn/gsn/dist/types/merge.d.ts b/node_modules/@opengsn/gsn/dist/types/merge.d.ts
new file mode 100755
index 0000000..dab675f
--- /dev/null
+++ b/node_modules/@opengsn/gsn/dist/types/merge.d.ts
@@ -0,0 +1,73 @@
+/* Generated by ts-generator ver. 0.0.8 */
+/* tslint:disable */
+
+/// <reference types="@openeth/truffle-typings" />
+
+import * as TruffleContracts from ".";
+
+declare global {
+  namespace Truffle {
+    interface Artifacts {
+      require(name: "BasePaymaster"): TruffleContracts.BasePaymasterContract;
+      require(
+        name: "BaseRelayRecipient"
+      ): TruffleContracts.BaseRelayRecipientContract;
+      require(name: "EIP712Sig"): TruffleContracts.EIP712SigContract;
+      require(name: "ERC20"): TruffleContracts.ERC20Contract;
+      require(name: "IERC20"): TruffleContracts.IERC20Contract;
+      require(name: "IPaymaster"): TruffleContracts.IPaymasterContract;
+      require(name: "IRelayHub"): TruffleContracts.IRelayHubContract;
+      require(
+        name: "IRelayRecipient"
+      ): TruffleContracts.IRelayRecipientContract;
+      require(name: "IStakeManager"): TruffleContracts.IStakeManagerContract;
+      require(
+        name: "ITrustedForwarder"
+      ): TruffleContracts.ITrustedForwarderContract;
+      require(name: "IUniswap"): TruffleContracts.IUniswapContract;
+      require(name: "Migrations"): TruffleContracts.MigrationsContract;
+      require(name: "Ownable"): TruffleContracts.OwnableContract;
+      require(
+        name: "PayableWithEmit"
+      ): TruffleContracts.PayableWithEmitContract;
+      require(name: "Penalizer"): TruffleContracts.PenalizerContract;
+      require(name: "RelayHub"): TruffleContracts.RelayHubContract;
+      require(name: "StakeManager"): TruffleContracts.StakeManagerContract;
+      require(
+        name: "TestPaymasterConfigurableMisbehavior"
+      ): TruffleContracts.TestPaymasterConfigurableMisbehaviorContract;
+      require(
+        name: "TestPaymasterEverythingAccepted"
+      ): TruffleContracts.TestPaymasterEverythingAcceptedContract;
+      require(
+        name: "TestPaymasterOwnerSignature"
+      ): TruffleContracts.TestPaymasterOwnerSignatureContract;
+      require(
+        name: "TestPaymasterPreconfiguredApproval"
+      ): TruffleContracts.TestPaymasterPreconfiguredApprovalContract;
+      require(
+        name: "TestPaymasterStoreContext"
+      ): TruffleContracts.TestPaymasterStoreContextContract;
+      require(
+        name: "TestPaymasterVariableGasLimits"
+      ): TruffleContracts.TestPaymasterVariableGasLimitsContract;
+      require(name: "TestProxy"): TruffleContracts.TestProxyContract;
+      require(name: "TestRecipient"): TruffleContracts.TestRecipientContract;
+      require(
+        name: "TestRecipientUtils"
+      ): TruffleContracts.TestRecipientUtilsContract;
+      require(name: "TestToken"): TruffleContracts.TestTokenContract;
+      require(name: "TestUniswap"): TruffleContracts.TestUniswapContract;
+      require(
+        name: "TokenGasCalculator"
+      ): TruffleContracts.TokenGasCalculatorContract;
+      require(name: "TokenPaymaster"): TruffleContracts.TokenPaymasterContract;
+      require(
+        name: "TrustedBatchForwarder"
+      ): TruffleContracts.TrustedBatchForwarderContract;
+      require(
+        name: "TrustedForwarder"
+      ): TruffleContracts.TrustedForwarderContract;
+    }
+  }
+}
diff --git a/node_modules/@opengsn/gsn/dist/types/truffle-contracts/index.d.ts b/node_modules/@opengsn/gsn/dist/types/truffle-contracts/index.d.ts
new file mode 100755
index 0000000..5aec39b
--- /dev/null
+++ b/node_modules/@opengsn/gsn/dist/types/truffle-contracts/index.d.ts
@@ -0,0 +1,4784 @@
+/* Generated by ts-generator ver. 0.0.8 */
+/* tslint:disable */
+
+/// <reference types="@openeth/truffle-typings" />
+import BN from "bn.js";
+
+export interface BasePaymasterContract
+  extends Truffle.Contract<BasePaymasterInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<BasePaymasterInstance>;
+}
+
+export interface BaseRelayRecipientContract
+  extends Truffle.Contract<BaseRelayRecipientInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<BaseRelayRecipientInstance>;
+}
+
+export interface EIP712SigContract extends Truffle.Contract<EIP712SigInstance> {
+  "new"(
+    verifier: string | BN,
+    meta?: Truffle.TransactionDetails
+  ): Promise<EIP712SigInstance>;
+}
+
+export interface ERC20Contract extends Truffle.Contract<ERC20Instance> {
+  "new"(
+    name: string,
+    symbol: string,
+    meta?: Truffle.TransactionDetails
+  ): Promise<ERC20Instance>;
+}
+
+export interface IERC20Contract extends Truffle.Contract<IERC20Instance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<IERC20Instance>;
+}
+
+export interface IPaymasterContract
+  extends Truffle.Contract<IPaymasterInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<IPaymasterInstance>;
+}
+
+export interface IRelayHubContract extends Truffle.Contract<IRelayHubInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<IRelayHubInstance>;
+}
+
+export interface IRelayRecipientContract
+  extends Truffle.Contract<IRelayRecipientInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<IRelayRecipientInstance>;
+}
+
+export interface IStakeManagerContract
+  extends Truffle.Contract<IStakeManagerInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<IStakeManagerInstance>;
+}
+
+export interface ITrustedForwarderContract
+  extends Truffle.Contract<ITrustedForwarderInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<ITrustedForwarderInstance>;
+}
+
+export interface IUniswapContract extends Truffle.Contract<IUniswapInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<IUniswapInstance>;
+}
+
+export interface MigrationsContract
+  extends Truffle.Contract<MigrationsInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<MigrationsInstance>;
+}
+
+export interface OwnableContract extends Truffle.Contract<OwnableInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<OwnableInstance>;
+}
+
+export interface PayableWithEmitContract
+  extends Truffle.Contract<PayableWithEmitInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<PayableWithEmitInstance>;
+}
+
+export interface PenalizerContract extends Truffle.Contract<PenalizerInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<PenalizerInstance>;
+}
+
+export interface RelayHubContract extends Truffle.Contract<RelayHubInstance> {
+  "new"(
+    _gtxdatanonzero: number | BN | string,
+    _stakeManager: string | BN,
+    _penalizer: string | BN,
+    meta?: Truffle.TransactionDetails
+  ): Promise<RelayHubInstance>;
+}
+
+export interface StakeManagerContract
+  extends Truffle.Contract<StakeManagerInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<StakeManagerInstance>;
+}
+
+export interface TestPaymasterConfigurableMisbehaviorContract
+  extends Truffle.Contract<TestPaymasterConfigurableMisbehaviorInstance> {
+  "new"(
+    meta?: Truffle.TransactionDetails
+  ): Promise<TestPaymasterConfigurableMisbehaviorInstance>;
+}
+
+export interface TestPaymasterEverythingAcceptedContract
+  extends Truffle.Contract<TestPaymasterEverythingAcceptedInstance> {
+  "new"(
+    meta?: Truffle.TransactionDetails
+  ): Promise<TestPaymasterEverythingAcceptedInstance>;
+}
+
+export interface TestPaymasterOwnerSignatureContract
+  extends Truffle.Contract<TestPaymasterOwnerSignatureInstance> {
+  "new"(
+    meta?: Truffle.TransactionDetails
+  ): Promise<TestPaymasterOwnerSignatureInstance>;
+}
+
+export interface TestPaymasterPreconfiguredApprovalContract
+  extends Truffle.Contract<TestPaymasterPreconfiguredApprovalInstance> {
+  "new"(
+    meta?: Truffle.TransactionDetails
+  ): Promise<TestPaymasterPreconfiguredApprovalInstance>;
+}
+
+export interface TestPaymasterStoreContextContract
+  extends Truffle.Contract<TestPaymasterStoreContextInstance> {
+  "new"(
+    meta?: Truffle.TransactionDetails
+  ): Promise<TestPaymasterStoreContextInstance>;
+}
+
+export interface TestPaymasterVariableGasLimitsContract
+  extends Truffle.Contract<TestPaymasterVariableGasLimitsInstance> {
+  "new"(
+    meta?: Truffle.TransactionDetails
+  ): Promise<TestPaymasterVariableGasLimitsInstance>;
+}
+
+export interface TestProxyContract extends Truffle.Contract<TestProxyInstance> {
+  "new"(
+    forwarder: string | BN,
+    meta?: Truffle.TransactionDetails
+  ): Promise<TestProxyInstance>;
+}
+
+export interface TestRecipientContract
+  extends Truffle.Contract<TestRecipientInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<TestRecipientInstance>;
+}
+
+export interface TestRecipientUtilsContract
+  extends Truffle.Contract<TestRecipientUtilsInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<TestRecipientUtilsInstance>;
+}
+
+export interface TestTokenContract extends Truffle.Contract<TestTokenInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<TestTokenInstance>;
+}
+
+export interface TestUniswapContract
+  extends Truffle.Contract<TestUniswapInstance> {
+  "new"(
+    _rateMult: number | BN | string,
+    _rateDiv: number | BN | string,
+    meta?: Truffle.TransactionDetails
+  ): Promise<TestUniswapInstance>;
+}
+
+export interface TokenGasCalculatorContract
+  extends Truffle.Contract<TokenGasCalculatorInstance> {
+  "new"(
+    _gtxdatanonzero: number | BN | string,
+    _stakeManager: string | BN,
+    _penalizer: string | BN,
+    meta?: Truffle.TransactionDetails
+  ): Promise<TokenGasCalculatorInstance>;
+}
+
+export interface TokenPaymasterContract
+  extends Truffle.Contract<TokenPaymasterInstance> {
+  "new"(
+    _uniswap: string | BN,
+    meta?: Truffle.TransactionDetails
+  ): Promise<TokenPaymasterInstance>;
+}
+
+export interface TrustedBatchForwarderContract
+  extends Truffle.Contract<TrustedBatchForwarderInstance> {
+  "new"(
+    meta?: Truffle.TransactionDetails
+  ): Promise<TrustedBatchForwarderInstance>;
+}
+
+export interface TrustedForwarderContract
+  extends Truffle.Contract<TrustedForwarderInstance> {
+  "new"(meta?: Truffle.TransactionDetails): Promise<TrustedForwarderInstance>;
+}
+
+export interface BasePaymasterInstance extends Truffle.ContractInstance {
+  acceptRelayedCall(
+    relayRequest: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    approvalData: string,
+    maxPossibleGas: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<string>;
+
+  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  postRelayedCall: {
+    (
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  preRelayedCall: {
+    (context: string, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    sendTransaction(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  renounceOwnership: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  transferOwnership: {
+    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  getHubAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  getGasLimits(
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<{
+    acceptRelayedCallGasLimit: string;
+    preRelayedCallGasLimit: string;
+    postRelayedCallGasLimit: string;
+  }>;
+
+  setRelayHub: {
+    (hub: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  getRelayHubDeposit(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  withdrawRelayHubDepositTo: {
+    (
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface BaseRelayRecipientInstance extends Truffle.ContractInstance {
+  getTrustedForwarder(txDetails?: Truffle.TransactionDetails): Promise<string>;
+}
+
+export interface EIP712SigInstance extends Truffle.ContractInstance {
+  CALLDATA_TYPEHASH(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  DOMAIN_SEPARATOR(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  EIP712DOMAIN_TYPEHASH(
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<string>;
+
+  RELAYDATA_TYPEHASH(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  RELAY_REQUEST_TYPEHASH(
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<string>;
+
+  verify(
+    req: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    signature: string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<boolean>;
+}
+
+export interface ERC20Instance extends Truffle.ContractInstance {
+  name(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  decimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  balanceOf(
+    account: string | BN,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  transfer: {
+    (
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<boolean>;
+    sendTransaction(
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  allowance(
+    owner: string | BN,
+    spender: string | BN,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  approve: {
+    (
+      spender: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      spender: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<boolean>;
+    sendTransaction(
+      spender: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      spender: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  transferFrom: {
+    (
+      sender: string | BN,
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      sender: string | BN,
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<boolean>;
+    sendTransaction(
+      sender: string | BN,
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      sender: string | BN,
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  increaseAllowance: {
+    (
+      spender: string | BN,
+      addedValue: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      spender: string | BN,
+      addedValue: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<boolean>;
+    sendTransaction(
+      spender: string | BN,
+      addedValue: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      spender: string | BN,
+      addedValue: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  decreaseAllowance: {
+    (
+      spender: string | BN,
+      subtractedValue: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      spender: string | BN,
+      subtractedValue: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<boolean>;
+    sendTransaction(
+      spender: string | BN,
+      subtractedValue: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      spender: string | BN,
+      subtractedValue: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface IERC20Instance extends Truffle.ContractInstance {
+  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  balanceOf(
+    account: string | BN,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  transfer: {
+    (
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<boolean>;
+    sendTransaction(
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  allowance(
+    owner: string | BN,
+    spender: string | BN,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  approve: {
+    (
+      spender: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      spender: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<boolean>;
+    sendTransaction(
+      spender: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      spender: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  transferFrom: {
+    (
+      sender: string | BN,
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      sender: string | BN,
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<boolean>;
+    sendTransaction(
+      sender: string | BN,
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      sender: string | BN,
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface IPaymasterInstance extends Truffle.ContractInstance {
+  getHubAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  getRelayHubDeposit(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  getGasLimits(
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<{
+    acceptRelayedCallGasLimit: string;
+    preRelayedCallGasLimit: string;
+    postRelayedCallGasLimit: string;
+  }>;
+
+  acceptRelayedCall(
+    relayRequest: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    approvalData: string,
+    maxPossibleGas: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<string>;
+
+  preRelayedCall: {
+    (context: string, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    sendTransaction(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  postRelayedCall: {
+    (
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface IRelayHubInstance extends Truffle.ContractInstance {
+  getStakeManager(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  addRelayWorkers: {
+    (
+      newRelayWorkers: (string | BN)[],
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      newRelayWorkers: (string | BN)[],
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      newRelayWorkers: (string | BN)[],
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      newRelayWorkers: (string | BN)[],
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  registerRelayServer: {
+    (
+      baseRelayFee: number | BN | string,
+      pctRelayFee: number | BN | string,
+      url: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      baseRelayFee: number | BN | string,
+      pctRelayFee: number | BN | string,
+      url: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      baseRelayFee: number | BN | string,
+      pctRelayFee: number | BN | string,
+      url: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      baseRelayFee: number | BN | string,
+      pctRelayFee: number | BN | string,
+      url: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  depositFor: {
+    (target: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  balanceOf(
+    target: string | BN,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  withdraw: {
+    (
+      amount: number | BN | string,
+      dest: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      amount: number | BN | string,
+      dest: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      amount: number | BN | string,
+      dest: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      amount: number | BN | string,
+      dest: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  canRelay(
+    relayRequest: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    maxPossibleGas: number | BN | string,
+    acceptRelayedCallGasLimit: number | BN | string,
+    signature: string,
+    approvalData: string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<[boolean, string]>;
+
+  relayCall: {
+    (
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      approvalData: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      approvalData: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      approvalData: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      approvalData: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  penalize: {
+    (
+      relayWorker: string | BN,
+      beneficiary: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayWorker: string | BN,
+      beneficiary: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayWorker: string | BN,
+      beneficiary: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayWorker: string | BN,
+      beneficiary: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  getHubOverhead(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  calculateCharge(
+    gasUsed: number | BN | string,
+    gasData: {
+      gasLimit: number | BN | string;
+      gasPrice: number | BN | string;
+      pctRelayFee: number | BN | string;
+      baseRelayFee: number | BN | string;
+    },
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  getVersion(txDetails?: Truffle.TransactionDetails): Promise<string>;
+}
+
+export interface IRelayRecipientInstance extends Truffle.ContractInstance {
+  getTrustedForwarder(txDetails?: Truffle.TransactionDetails): Promise<string>;
+}
+
+export interface IStakeManagerInstance extends Truffle.ContractInstance {
+  stakeForAddress: {
+    (
+      relayManager: string | BN,
+      unstakeDelay: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayManager: string | BN,
+      unstakeDelay: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayManager: string | BN,
+      unstakeDelay: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayManager: string | BN,
+      unstakeDelay: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  unlockStake: {
+    (
+      relayManager: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayManager: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayManager: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayManager: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  withdrawStake: {
+    (
+      relayManager: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayManager: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayManager: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayManager: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  authorizeHub: {
+    (
+      relayManager: string | BN,
+      relayHub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayManager: string | BN,
+      relayHub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayManager: string | BN,
+      relayHub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayManager: string | BN,
+      relayHub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  unauthorizeHub: {
+    (
+      relayManager: string | BN,
+      relayHub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayManager: string | BN,
+      relayHub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayManager: string | BN,
+      relayHub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayManager: string | BN,
+      relayHub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  isRelayManagerStaked(
+    relayManager: string | BN,
+    minAmount: number | BN | string,
+    minUnstakeDelay: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<boolean>;
+
+  penalizeRelayManager: {
+    (
+      relayManager: string | BN,
+      beneficiary: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayManager: string | BN,
+      beneficiary: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayManager: string | BN,
+      beneficiary: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayManager: string | BN,
+      beneficiary: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  getStakeInfo(
+    relayManager: string | BN,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<{
+    stake: string;
+    unstakeDelay: string;
+    withdrawBlock: string;
+    owner: string;
+  }>;
+}
+
+export interface ITrustedForwarderInstance extends Truffle.ContractInstance {
+  verify(
+    req: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    sig: string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<void>;
+
+  verifyAndCall: {
+    (
+      req: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      sig: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      req: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      sig: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<[boolean, string]>;
+    sendTransaction(
+      req: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      sig: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      req: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      sig: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  getNonce(
+    from: string | BN,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+}
+
+export interface IUniswapInstance extends Truffle.ContractInstance {
+  tokenAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  tokenToEthSwapOutput: {
+    (
+      ethBought: number | BN | string,
+      maxTokens: number | BN | string,
+      deadline: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      ethBought: number | BN | string,
+      maxTokens: number | BN | string,
+      deadline: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<BN>;
+    sendTransaction(
+      ethBought: number | BN | string,
+      maxTokens: number | BN | string,
+      deadline: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      ethBought: number | BN | string,
+      maxTokens: number | BN | string,
+      deadline: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  tokenToEthTransferOutput: {
+    (
+      ethBought: number | BN | string,
+      maxTokens: number | BN | string,
+      deadline: number | BN | string,
+      recipient: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      ethBought: number | BN | string,
+      maxTokens: number | BN | string,
+      deadline: number | BN | string,
+      recipient: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<BN>;
+    sendTransaction(
+      ethBought: number | BN | string,
+      maxTokens: number | BN | string,
+      deadline: number | BN | string,
+      recipient: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      ethBought: number | BN | string,
+      maxTokens: number | BN | string,
+      deadline: number | BN | string,
+      recipient: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  getTokenToEthOutputPrice(
+    ethBought: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  getTokenToEthInputPrice(
+    tokensSold: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+}
+
+export interface MigrationsInstance extends Truffle.ContractInstance {
+  last_completed_migration(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  setCompleted: {
+    (
+      completed: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      completed: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      completed: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      completed: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  upgrade: {
+    (newAddress: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      newAddress: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      newAddress: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      newAddress: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface OwnableInstance extends Truffle.ContractInstance {
+  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  renounceOwnership: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  transferOwnership: {
+    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface PayableWithEmitInstance extends Truffle.ContractInstance {
+  getTrustedForwarder(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  doSend: {
+    (target: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface PenalizerInstance extends Truffle.ContractInstance {
+  penalizeRepeatedNonce: {
+    (
+      unsignedTx1: string,
+      signature1: string,
+      unsignedTx2: string,
+      signature2: string,
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      unsignedTx1: string,
+      signature1: string,
+      unsignedTx2: string,
+      signature2: string,
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      unsignedTx1: string,
+      signature1: string,
+      unsignedTx2: string,
+      signature2: string,
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      unsignedTx1: string,
+      signature1: string,
+      unsignedTx2: string,
+      signature2: string,
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  penalizeIllegalTransaction: {
+    (
+      unsignedTx: string,
+      signature: string,
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      unsignedTx: string,
+      signature: string,
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      unsignedTx: string,
+      signature: string,
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      unsignedTx: string,
+      signature: string,
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface RelayHubInstance extends Truffle.ContractInstance {
+  COMMIT_ID(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  GTRANSACTION(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  MAX_WORKER_COUNT(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  eip712sig(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  gtxdatanonzero(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  penalizer(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  stakeManager(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  version(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  getHubOverhead(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  getVersion(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  getStakeManager(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  registerRelayServer: {
+    (
+      baseRelayFee: number | BN | string,
+      pctRelayFee: number | BN | string,
+      url: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      baseRelayFee: number | BN | string,
+      pctRelayFee: number | BN | string,
+      url: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      baseRelayFee: number | BN | string,
+      pctRelayFee: number | BN | string,
+      url: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      baseRelayFee: number | BN | string,
+      pctRelayFee: number | BN | string,
+      url: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  addRelayWorkers: {
+    (
+      newRelayWorkers: (string | BN)[],
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      newRelayWorkers: (string | BN)[],
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      newRelayWorkers: (string | BN)[],
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      newRelayWorkers: (string | BN)[],
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  depositFor: {
+    (target: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  balanceOf(
+    target: string | BN,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  withdraw: {
+    (
+      amount: number | BN | string,
+      dest: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      amount: number | BN | string,
+      dest: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      amount: number | BN | string,
+      dest: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      amount: number | BN | string,
+      dest: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  canRelay(
+    relayRequest: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    maxPossibleGas: number | BN | string,
+    acceptRelayedCallGasLimit: number | BN | string,
+    signature: string,
+    approvalData: string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<[boolean, string]>;
+
+  relayCall: {
+    (
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      approvalData: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      approvalData: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      approvalData: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      approvalData: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  recipientCallsAtomic: {
+    (
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      gasLimits: {
+        acceptRelayedCallGasLimit: number | BN | string;
+        preRelayedCallGasLimit: number | BN | string;
+        postRelayedCallGasLimit: number | BN | string;
+      },
+      totalInitialGas: number | BN | string,
+      calldataGas: number | BN | string,
+      recipientContext: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      gasLimits: {
+        acceptRelayedCallGasLimit: number | BN | string;
+        preRelayedCallGasLimit: number | BN | string;
+        postRelayedCallGasLimit: number | BN | string;
+      },
+      totalInitialGas: number | BN | string,
+      calldataGas: number | BN | string,
+      recipientContext: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<BN>;
+    sendTransaction(
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      gasLimits: {
+        acceptRelayedCallGasLimit: number | BN | string;
+        preRelayedCallGasLimit: number | BN | string;
+        postRelayedCallGasLimit: number | BN | string;
+      },
+      totalInitialGas: number | BN | string,
+      calldataGas: number | BN | string,
+      recipientContext: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      gasLimits: {
+        acceptRelayedCallGasLimit: number | BN | string;
+        preRelayedCallGasLimit: number | BN | string;
+        postRelayedCallGasLimit: number | BN | string;
+      },
+      totalInitialGas: number | BN | string,
+      calldataGas: number | BN | string,
+      recipientContext: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  calculateCharge(
+    gasUsed: number | BN | string,
+    gasData: {
+      gasLimit: number | BN | string;
+      gasPrice: number | BN | string;
+      pctRelayFee: number | BN | string;
+      baseRelayFee: number | BN | string;
+    },
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  penalize: {
+    (
+      relayWorker: string | BN,
+      beneficiary: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayWorker: string | BN,
+      beneficiary: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayWorker: string | BN,
+      beneficiary: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayWorker: string | BN,
+      beneficiary: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface StakeManagerInstance extends Truffle.ContractInstance {
+  authorizedHubs(
+    arg0: string | BN,
+    arg1: string | BN,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  stakes(
+    arg0: string | BN,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<[BN, BN, BN, string]>;
+
+  getStakeInfo(
+    relayManager: string | BN,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<{
+    stake: string;
+    unstakeDelay: string;
+    withdrawBlock: string;
+    owner: string;
+  }>;
+
+  stakeForAddress: {
+    (
+      relayManager: string | BN,
+      unstakeDelay: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayManager: string | BN,
+      unstakeDelay: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayManager: string | BN,
+      unstakeDelay: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayManager: string | BN,
+      unstakeDelay: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  unlockStake: {
+    (
+      relayManager: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayManager: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayManager: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayManager: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  withdrawStake: {
+    (
+      relayManager: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayManager: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayManager: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayManager: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  authorizeHub: {
+    (
+      relayManager: string | BN,
+      relayHub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayManager: string | BN,
+      relayHub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayManager: string | BN,
+      relayHub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayManager: string | BN,
+      relayHub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  unauthorizeHub: {
+    (
+      relayManager: string | BN,
+      relayHub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayManager: string | BN,
+      relayHub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayManager: string | BN,
+      relayHub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayManager: string | BN,
+      relayHub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  isRelayManagerStaked(
+    relayManager: string | BN,
+    minAmount: number | BN | string,
+    minUnstakeDelay: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<boolean>;
+
+  penalizeRelayManager: {
+    (
+      relayManager: string | BN,
+      beneficiary: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayManager: string | BN,
+      beneficiary: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayManager: string | BN,
+      beneficiary: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayManager: string | BN,
+      beneficiary: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface TestPaymasterConfigurableMisbehaviorInstance
+  extends Truffle.ContractInstance {
+  deposit: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  getGasLimits(
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<{
+    acceptRelayedCallGasLimit: string;
+    preRelayedCallGasLimit: string;
+    postRelayedCallGasLimit: string;
+  }>;
+
+  getHubAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  getRelayHubDeposit(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  overspendAcceptGas(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
+
+  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  renounceOwnership: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  returnInvalidErrorCode(
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<boolean>;
+
+  revertPostRelayCall(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
+
+  revertPreRelayCall(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
+
+  setRelayHub: {
+    (hub: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  transferOwnership: {
+    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  withdrawAll: {
+    (destination: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  withdrawDuringPostRelayedCall(
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<boolean>;
+
+  withdrawDuringPreRelayedCall(
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<boolean>;
+
+  withdrawRelayHubDepositTo: {
+    (
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  setWithdrawDuringPostRelayedCall: {
+    (val: boolean, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(val: boolean, txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(
+      val: boolean,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      val: boolean,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  setWithdrawDuringPreRelayedCall: {
+    (val: boolean, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(val: boolean, txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(
+      val: boolean,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      val: boolean,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  setReturnInvalidErrorCode: {
+    (val: boolean, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(val: boolean, txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(
+      val: boolean,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      val: boolean,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  setRevertPostRelayCall: {
+    (val: boolean, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(val: boolean, txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(
+      val: boolean,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      val: boolean,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  setRevertPreRelayCall: {
+    (val: boolean, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(val: boolean, txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(
+      val: boolean,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      val: boolean,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  setOverspendAcceptGas: {
+    (val: boolean, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(val: boolean, txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(
+      val: boolean,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      val: boolean,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  acceptRelayedCall(
+    relayRequest: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    approvalData: string,
+    maxPossibleCharge: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<string>;
+
+  preRelayedCall: {
+    (context: string, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    sendTransaction(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  postRelayedCall: {
+    (
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  withdrawAllBalance: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+}
+
+export interface TestPaymasterEverythingAcceptedInstance
+  extends Truffle.ContractInstance {
+  getGasLimits(
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<{
+    acceptRelayedCallGasLimit: string;
+    preRelayedCallGasLimit: string;
+    postRelayedCallGasLimit: string;
+  }>;
+
+  getHubAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  getRelayHubDeposit(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  renounceOwnership: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  setRelayHub: {
+    (hub: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  transferOwnership: {
+    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  withdrawRelayHubDepositTo: {
+    (
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  acceptRelayedCall(
+    relayRequest: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    approvalData: string,
+    maxPossibleCharge: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<string>;
+
+  preRelayedCall: {
+    (context: string, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    sendTransaction(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  postRelayedCall: {
+    (
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  deposit: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  withdrawAll: {
+    (destination: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface TestPaymasterOwnerSignatureInstance
+  extends Truffle.ContractInstance {
+  deposit: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  getGasLimits(
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<{
+    acceptRelayedCallGasLimit: string;
+    preRelayedCallGasLimit: string;
+    postRelayedCallGasLimit: string;
+  }>;
+
+  getHubAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  getRelayHubDeposit(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  postRelayedCall: {
+    (
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  preRelayedCall: {
+    (context: string, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    sendTransaction(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  renounceOwnership: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  setRelayHub: {
+    (hub: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  transferOwnership: {
+    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  withdrawAll: {
+    (destination: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  withdrawRelayHubDepositTo: {
+    (
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  acceptRelayedCall(
+    relayRequest: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    approvalData: string,
+    maxPossibleCharge: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<string>;
+}
+
+export interface TestPaymasterPreconfiguredApprovalInstance
+  extends Truffle.ContractInstance {
+  deposit: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  expectedApprovalData(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  getGasLimits(
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<{
+    acceptRelayedCallGasLimit: string;
+    preRelayedCallGasLimit: string;
+    postRelayedCallGasLimit: string;
+  }>;
+
+  getHubAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  getRelayHubDeposit(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  postRelayedCall: {
+    (
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  preRelayedCall: {
+    (context: string, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    sendTransaction(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  renounceOwnership: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  setRelayHub: {
+    (hub: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  transferOwnership: {
+    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  withdrawAll: {
+    (destination: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  withdrawRelayHubDepositTo: {
+    (
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  setExpectedApprovalData: {
+    (val: string, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(val: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(
+      val: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      val: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  acceptRelayedCall(
+    relayRequest: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    approvalData: string,
+    maxPossibleCharge: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<string>;
+}
+
+export interface TestPaymasterStoreContextInstance
+  extends Truffle.ContractInstance {
+  deposit: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  getGasLimits(
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<{
+    acceptRelayedCallGasLimit: string;
+    preRelayedCallGasLimit: string;
+    postRelayedCallGasLimit: string;
+  }>;
+
+  getHubAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  getRelayHubDeposit(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  renounceOwnership: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  setRelayHub: {
+    (hub: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  transferOwnership: {
+    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  withdrawAll: {
+    (destination: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  withdrawRelayHubDepositTo: {
+    (
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  acceptRelayedCall(
+    relayRequest: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    approvalData: string,
+    maxPossibleGas: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<string>;
+
+  preRelayedCall: {
+    (context: string, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    sendTransaction(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  postRelayedCall: {
+    (
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface TestPaymasterVariableGasLimitsInstance
+  extends Truffle.ContractInstance {
+  deposit: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  getGasLimits(
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<{
+    acceptRelayedCallGasLimit: string;
+    preRelayedCallGasLimit: string;
+    postRelayedCallGasLimit: string;
+  }>;
+
+  getHubAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  getRelayHubDeposit(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  renounceOwnership: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  setRelayHub: {
+    (hub: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  transferOwnership: {
+    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  withdrawAll: {
+    (destination: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      destination: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  withdrawRelayHubDepositTo: {
+    (
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  acceptRelayedCall(
+    relayRequest: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    approvalData: string,
+    maxPossibleGas: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<string>;
+
+  preRelayedCall: {
+    (context: string, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    sendTransaction(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  postRelayedCall: {
+    (
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface TestProxyInstance extends Truffle.ContractInstance {
+  getTrustedForwarder(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  renounceOwnership: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  transferOwnership: {
+    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
+
+  test: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  execute: {
+    (
+      target: string | BN,
+      func: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      target: string | BN,
+      func: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      target: string | BN,
+      func: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      target: string | BN,
+      func: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface TestRecipientInstance extends Truffle.ContractInstance {
+  getTrustedForwarder(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  paymaster(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  setTrustedForwarder: {
+    (forwarder: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      forwarder: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      forwarder: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      forwarder: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  testRevert: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  setWithdrawDuringRelayedCall: {
+    (_paymaster: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      _paymaster: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      _paymaster: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      _paymaster: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  emitMessage: {
+    (message: string, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      message: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      message: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      message: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  withdrawAllBalance: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  dontEmitMessage: {
+    (message: string, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      message: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      message: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      message: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  emitMessageNoParams: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+}
+
+export interface TestRecipientUtilsInstance extends Truffle.ContractInstance {
+  testFunc: {
+    (
+      arg0: number | BN | string,
+      arg1: string,
+      arg2: number | BN | string,
+      arg3: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      arg0: number | BN | string,
+      arg1: string,
+      arg2: number | BN | string,
+      arg3: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      arg0: number | BN | string,
+      arg1: string,
+      arg2: number | BN | string,
+      arg3: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      arg0: number | BN | string,
+      arg1: string,
+      arg2: number | BN | string,
+      arg3: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  getParam(
+    msgData: string,
+    index: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  getMethodSig(
+    msgData: string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<string>;
+
+  getBytesParam(
+    msgData: string,
+    index: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<string>;
+
+  getStringParam(
+    msgData: string,
+    index: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<string>;
+}
+
+export interface TestTokenInstance extends Truffle.ContractInstance {
+  allowance(
+    owner: string | BN,
+    spender: string | BN,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  approve: {
+    (
+      spender: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      spender: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<boolean>;
+    sendTransaction(
+      spender: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      spender: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  balanceOf(
+    account: string | BN,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  decimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  decreaseAllowance: {
+    (
+      spender: string | BN,
+      subtractedValue: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      spender: string | BN,
+      subtractedValue: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<boolean>;
+    sendTransaction(
+      spender: string | BN,
+      subtractedValue: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      spender: string | BN,
+      subtractedValue: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  increaseAllowance: {
+    (
+      spender: string | BN,
+      addedValue: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      spender: string | BN,
+      addedValue: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<boolean>;
+    sendTransaction(
+      spender: string | BN,
+      addedValue: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      spender: string | BN,
+      addedValue: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  name(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  transfer: {
+    (
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<boolean>;
+    sendTransaction(
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  transferFrom: {
+    (
+      sender: string | BN,
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      sender: string | BN,
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<boolean>;
+    sendTransaction(
+      sender: string | BN,
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      sender: string | BN,
+      recipient: string | BN,
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  mint: {
+    (
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      amount: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface TestUniswapInstance extends Truffle.ContractInstance {
+  rateDiv(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  rateMult(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  token(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  tokenAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  tokenToEthSwapOutput: {
+    (
+      ethBought: number | BN | string,
+      maxTokens: number | BN | string,
+      deadline: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      ethBought: number | BN | string,
+      maxTokens: number | BN | string,
+      deadline: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<BN>;
+    sendTransaction(
+      ethBought: number | BN | string,
+      maxTokens: number | BN | string,
+      deadline: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      ethBought: number | BN | string,
+      maxTokens: number | BN | string,
+      deadline: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  getTokenToEthInputPrice(
+    tokensSold: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  tokenToEthTransferOutput: {
+    (
+      ethBought: number | BN | string,
+      maxTokens: number | BN | string,
+      deadline: number | BN | string,
+      recipient: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      ethBought: number | BN | string,
+      maxTokens: number | BN | string,
+      deadline: number | BN | string,
+      recipient: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<BN>;
+    sendTransaction(
+      ethBought: number | BN | string,
+      maxTokens: number | BN | string,
+      deadline: number | BN | string,
+      recipient: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      ethBought: number | BN | string,
+      maxTokens: number | BN | string,
+      deadline: number | BN | string,
+      recipient: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  getTokenToEthOutputPrice(
+    ethBought: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+}
+
+export interface TokenGasCalculatorInstance extends Truffle.ContractInstance {
+  COMMIT_ID(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  GTRANSACTION(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  MAX_WORKER_COUNT(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  addRelayWorkers: {
+    (
+      newRelayWorkers: (string | BN)[],
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      newRelayWorkers: (string | BN)[],
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      newRelayWorkers: (string | BN)[],
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      newRelayWorkers: (string | BN)[],
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  balanceOf(
+    target: string | BN,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  calculateCharge(
+    gasUsed: number | BN | string,
+    gasData: {
+      gasLimit: number | BN | string;
+      gasPrice: number | BN | string;
+      pctRelayFee: number | BN | string;
+      baseRelayFee: number | BN | string;
+    },
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  canRelay(
+    relayRequest: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    maxPossibleGas: number | BN | string,
+    acceptRelayedCallGasLimit: number | BN | string,
+    signature: string,
+    approvalData: string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<[boolean, string]>;
+
+  depositFor: {
+    (target: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  eip712sig(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  getHubOverhead(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  getStakeManager(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  getVersion(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  gtxdatanonzero(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  penalize: {
+    (
+      relayWorker: string | BN,
+      beneficiary: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayWorker: string | BN,
+      beneficiary: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayWorker: string | BN,
+      beneficiary: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayWorker: string | BN,
+      beneficiary: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  penalizer(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  recipientCallsAtomic: {
+    (
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      gasLimits: {
+        acceptRelayedCallGasLimit: number | BN | string;
+        preRelayedCallGasLimit: number | BN | string;
+        postRelayedCallGasLimit: number | BN | string;
+      },
+      totalInitialGas: number | BN | string,
+      calldataGas: number | BN | string,
+      recipientContext: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      gasLimits: {
+        acceptRelayedCallGasLimit: number | BN | string;
+        preRelayedCallGasLimit: number | BN | string;
+        postRelayedCallGasLimit: number | BN | string;
+      },
+      totalInitialGas: number | BN | string,
+      calldataGas: number | BN | string,
+      recipientContext: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<BN>;
+    sendTransaction(
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      gasLimits: {
+        acceptRelayedCallGasLimit: number | BN | string;
+        preRelayedCallGasLimit: number | BN | string;
+        postRelayedCallGasLimit: number | BN | string;
+      },
+      totalInitialGas: number | BN | string,
+      calldataGas: number | BN | string,
+      recipientContext: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      gasLimits: {
+        acceptRelayedCallGasLimit: number | BN | string;
+        preRelayedCallGasLimit: number | BN | string;
+        postRelayedCallGasLimit: number | BN | string;
+      },
+      totalInitialGas: number | BN | string,
+      calldataGas: number | BN | string,
+      recipientContext: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  registerRelayServer: {
+    (
+      baseRelayFee: number | BN | string,
+      pctRelayFee: number | BN | string,
+      url: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      baseRelayFee: number | BN | string,
+      pctRelayFee: number | BN | string,
+      url: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      baseRelayFee: number | BN | string,
+      pctRelayFee: number | BN | string,
+      url: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      baseRelayFee: number | BN | string,
+      pctRelayFee: number | BN | string,
+      url: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  relayCall: {
+    (
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      approvalData: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      approvalData: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      approvalData: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      relayRequest: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      signature: string,
+      approvalData: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  renounceOwnership: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  stakeManager(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  transferOwnership: {
+    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  version(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  withdraw: {
+    (
+      amount: number | BN | string,
+      dest: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      amount: number | BN | string,
+      dest: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      amount: number | BN | string,
+      dest: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      amount: number | BN | string,
+      dest: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  calculatePostGas: {
+    (paymaster: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      paymaster: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<[BN, BN]>;
+    sendTransaction(
+      paymaster: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      paymaster: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface TokenPaymasterInstance extends Truffle.ContractInstance {
+  gasUsedByPostWithPreCharge(
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  gasUsedByPostWithoutPreCharge(
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  getGasLimits(
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<{
+    acceptRelayedCallGasLimit: string;
+    preRelayedCallGasLimit: string;
+    postRelayedCallGasLimit: string;
+  }>;
+
+  getHubAddr(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  getRelayHubDeposit(txDetails?: Truffle.TransactionDetails): Promise<BN>;
+
+  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  renounceOwnership: {
+    (txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
+    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
+    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
+  };
+
+  setRelayHub: {
+    (hub: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      hub: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  token(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  transferOwnership: {
+    (newOwner: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      newOwner: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  uniswap(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  withdrawRelayHubDepositTo: {
+    (
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      amount: number | BN | string,
+      target: string | BN,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  setPostGasUsage: {
+    (
+      _gasUsedByPostWithPreCharge: number | BN | string,
+      _gasUsedByPostWithoutPreCharge: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      _gasUsedByPostWithPreCharge: number | BN | string,
+      _gasUsedByPostWithoutPreCharge: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      _gasUsedByPostWithPreCharge: number | BN | string,
+      _gasUsedByPostWithoutPreCharge: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      _gasUsedByPostWithPreCharge: number | BN | string,
+      _gasUsedByPostWithoutPreCharge: number | BN | string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  getPayer(
+    relayRequest: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<string>;
+
+  acceptRelayedCall(
+    relayRequest: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    approvalData: string,
+    maxPossibleGas: number | BN | string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<string>;
+
+  preRelayedCall: {
+    (context: string, txDetails?: Truffle.TransactionDetails): Promise<
+      Truffle.TransactionResponse
+    >;
+    call(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    sendTransaction(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  postRelayedCall: {
+    (
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      context: string,
+      success: boolean,
+      preRetVal: string | BN,
+      gasUseWithoutPost: number | BN | string,
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      },
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface TrustedBatchForwarderInstance
+  extends Truffle.ContractInstance {
+  getNonce(
+    from: string | BN,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  getTrustedForwarder(txDetails?: Truffle.TransactionDetails): Promise<string>;
+
+  verify(
+    req: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    sig: string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<void>;
+
+  verifyAndCall: {
+    (
+      req: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      sig: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      req: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      sig: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<[boolean, string]>;
+    sendTransaction(
+      req: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      sig: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      req: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      sig: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+
+  sendBatch: {
+    (
+      targets: (string | BN)[],
+      encodedFunctions: string[],
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      targets: (string | BN)[],
+      encodedFunctions: string[],
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<void>;
+    sendTransaction(
+      targets: (string | BN)[],
+      encodedFunctions: string[],
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      targets: (string | BN)[],
+      encodedFunctions: string[],
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
+
+export interface TrustedForwarderInstance extends Truffle.ContractInstance {
+  getNonce(
+    from: string | BN,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<BN>;
+
+  verify(
+    req: {
+      target: string | BN;
+      encodedFunction: string;
+      gasData: {
+        gasLimit: number | BN | string;
+        gasPrice: number | BN | string;
+        pctRelayFee: number | BN | string;
+        baseRelayFee: number | BN | string;
+      };
+      relayData: {
+        senderAddress: string | BN;
+        senderNonce: number | BN | string;
+        relayWorker: string | BN;
+        paymaster: string | BN;
+      };
+    },
+    sig: string,
+    txDetails?: Truffle.TransactionDetails
+  ): Promise<void>;
+
+  verifyAndCall: {
+    (
+      req: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      sig: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<Truffle.TransactionResponse>;
+    call(
+      req: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      sig: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<[boolean, string]>;
+    sendTransaction(
+      req: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      sig: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<string>;
+    estimateGas(
+      req: {
+        target: string | BN;
+        encodedFunction: string;
+        gasData: {
+          gasLimit: number | BN | string;
+          gasPrice: number | BN | string;
+          pctRelayFee: number | BN | string;
+          baseRelayFee: number | BN | string;
+        };
+        relayData: {
+          senderAddress: string | BN;
+          senderNonce: number | BN | string;
+          relayWorker: string | BN;
+          paymaster: string | BN;
+        };
+      },
+      sig: string,
+      txDetails?: Truffle.TransactionDetails
+    ): Promise<number>;
+  };
+}
diff --git a/node_modules/@opengsn/gsn/dist/types/truffle-contracts/merge.d.ts b/node_modules/@opengsn/gsn/dist/types/truffle-contracts/merge.d.ts
new file mode 100755
index 0000000..dab675f
--- /dev/null
+++ b/node_modules/@opengsn/gsn/dist/types/truffle-contracts/merge.d.ts
@@ -0,0 +1,73 @@
+/* Generated by ts-generator ver. 0.0.8 */
+/* tslint:disable */
+
+/// <reference types="@openeth/truffle-typings" />
+
+import * as TruffleContracts from ".";
+
+declare global {
+  namespace Truffle {
+    interface Artifacts {
+      require(name: "BasePaymaster"): TruffleContracts.BasePaymasterContract;
+      require(
+        name: "BaseRelayRecipient"
+      ): TruffleContracts.BaseRelayRecipientContract;
+      require(name: "EIP712Sig"): TruffleContracts.EIP712SigContract;
+      require(name: "ERC20"): TruffleContracts.ERC20Contract;
+      require(name: "IERC20"): TruffleContracts.IERC20Contract;
+      require(name: "IPaymaster"): TruffleContracts.IPaymasterContract;
+      require(name: "IRelayHub"): TruffleContracts.IRelayHubContract;
+      require(
+        name: "IRelayRecipient"
+      ): TruffleContracts.IRelayRecipientContract;
+      require(name: "IStakeManager"): TruffleContracts.IStakeManagerContract;
+      require(
+        name: "ITrustedForwarder"
+      ): TruffleContracts.ITrustedForwarderContract;
+      require(name: "IUniswap"): TruffleContracts.IUniswapContract;
+      require(name: "Migrations"): TruffleContracts.MigrationsContract;
+      require(name: "Ownable"): TruffleContracts.OwnableContract;
+      require(
+        name: "PayableWithEmit"
+      ): TruffleContracts.PayableWithEmitContract;
+      require(name: "Penalizer"): TruffleContracts.PenalizerContract;
+      require(name: "RelayHub"): TruffleContracts.RelayHubContract;
+      require(name: "StakeManager"): TruffleContracts.StakeManagerContract;
+      require(
+        name: "TestPaymasterConfigurableMisbehavior"
+      ): TruffleContracts.TestPaymasterConfigurableMisbehaviorContract;
+      require(
+        name: "TestPaymasterEverythingAccepted"
+      ): TruffleContracts.TestPaymasterEverythingAcceptedContract;
+      require(
+        name: "TestPaymasterOwnerSignature"
+      ): TruffleContracts.TestPaymasterOwnerSignatureContract;
+      require(
+        name: "TestPaymasterPreconfiguredApproval"
+      ): TruffleContracts.TestPaymasterPreconfiguredApprovalContract;
+      require(
+        name: "TestPaymasterStoreContext"
+      ): TruffleContracts.TestPaymasterStoreContextContract;
+      require(
+        name: "TestPaymasterVariableGasLimits"
+      ): TruffleContracts.TestPaymasterVariableGasLimitsContract;
+      require(name: "TestProxy"): TruffleContracts.TestProxyContract;
+      require(name: "TestRecipient"): TruffleContracts.TestRecipientContract;
+      require(
+        name: "TestRecipientUtils"
+      ): TruffleContracts.TestRecipientUtilsContract;
+      require(name: "TestToken"): TruffleContracts.TestTokenContract;
+      require(name: "TestUniswap"): TruffleContracts.TestUniswapContract;
+      require(
+        name: "TokenGasCalculator"
+      ): TruffleContracts.TokenGasCalculatorContract;
+      require(name: "TokenPaymaster"): TruffleContracts.TokenPaymasterContract;
+      require(
+        name: "TrustedBatchForwarder"
+      ): TruffleContracts.TrustedBatchForwarderContract;
+      require(
+        name: "TrustedForwarder"
+      ): TruffleContracts.TrustedForwarderContract;
+    }
+  }
+}
diff --git a/node_modules/@opengsn/gsn/src/cli/CommandsLogic.ts b/node_modules/@opengsn/gsn/src/cli/CommandsLogic.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/cli/StatusLogic.ts b/node_modules/@opengsn/gsn/src/cli/StatusLogic.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/cli/commands/gsn-relayer-run.ts b/node_modules/@opengsn/gsn/src/cli/commands/gsn-relayer-run.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/cli/compiled/Penalizer.json b/node_modules/@opengsn/gsn/src/cli/compiled/Penalizer.json
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/cli/compiled/RelayHub.json b/node_modules/@opengsn/gsn/src/cli/compiled/RelayHub.json
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/cli/compiled/StakeManager.json b/node_modules/@opengsn/gsn/src/cli/compiled/StakeManager.json
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/cli/compiled/TestPaymasterEverythingAccepted.json b/node_modules/@opengsn/gsn/src/cli/compiled/TestPaymasterEverythingAccepted.json
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/cli/compiled/TrustedForwarder.json b/node_modules/@opengsn/gsn/src/cli/compiled/TrustedForwarder.json
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/cli/utils.ts b/node_modules/@opengsn/gsn/src/cli/utils.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/common/EIP712/Eip712Helper.js b/node_modules/@opengsn/gsn/src/common/EIP712/Eip712Helper.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/common/EIP712/GasData.js b/node_modules/@opengsn/gsn/src/common/EIP712/GasData.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/common/EIP712/RelayData.js b/node_modules/@opengsn/gsn/src/common/EIP712/RelayData.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/common/EIP712/RelayRequest.js b/node_modules/@opengsn/gsn/src/common/EIP712/RelayRequest.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/common/ErrorReplacerJSON.ts b/node_modules/@opengsn/gsn/src/common/ErrorReplacerJSON.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/common/PingResponse.ts b/node_modules/@opengsn/gsn/src/common/PingResponse.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/common/interfaces/IPaymaster.js b/node_modules/@opengsn/gsn/src/common/interfaces/IPaymaster.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/common/interfaces/IPaymaster.json b/node_modules/@opengsn/gsn/src/common/interfaces/IPaymaster.json
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/common/interfaces/IRelayHub.js b/node_modules/@opengsn/gsn/src/common/interfaces/IRelayHub.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/common/interfaces/IRelayHub.json b/node_modules/@opengsn/gsn/src/common/interfaces/IRelayHub.json
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/common/interfaces/IRelayRecipient.js b/node_modules/@opengsn/gsn/src/common/interfaces/IRelayRecipient.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/common/interfaces/IRelayRecipient.json b/node_modules/@opengsn/gsn/src/common/interfaces/IRelayRecipient.json
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/common/interfaces/IStakeManager.js b/node_modules/@opengsn/gsn/src/common/interfaces/IStakeManager.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/common/interfaces/IStakeManager.json b/node_modules/@opengsn/gsn/src/common/interfaces/IStakeManager.json
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/common/interfaces/ITrustedForwarder.js b/node_modules/@opengsn/gsn/src/common/interfaces/ITrustedForwarder.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/common/interfaces/ITrustedForwarder.json b/node_modules/@opengsn/gsn/src/common/interfaces/ITrustedForwarder.json
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/common/utils.js b/node_modules/@opengsn/gsn/src/common/utils.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/relayclient/AccountManager.ts b/node_modules/@opengsn/gsn/src/relayclient/AccountManager.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/relayclient/ContractInteractor.ts b/node_modules/@opengsn/gsn/src/relayclient/ContractInteractor.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/relayclient/GSNConfigurator.ts b/node_modules/@opengsn/gsn/src/relayclient/GSNConfigurator.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/relayclient/GsnTestEnvironment.ts b/node_modules/@opengsn/gsn/src/relayclient/GsnTestEnvironment.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/relayclient/HttpClient.ts b/node_modules/@opengsn/gsn/src/relayclient/HttpClient.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/relayclient/HttpWrapper.ts b/node_modules/@opengsn/gsn/src/relayclient/HttpWrapper.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/relayclient/KnownRelaysManager.ts b/node_modules/@opengsn/gsn/src/relayclient/KnownRelaysManager.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/relayclient/RelayClient.ts b/node_modules/@opengsn/gsn/src/relayclient/RelayClient.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/relayclient/RelayProvider.ts b/node_modules/@opengsn/gsn/src/relayclient/RelayProvider.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/relayclient/RelaySelectionManager.ts b/node_modules/@opengsn/gsn/src/relayclient/RelaySelectionManager.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/relayclient/RelayedTransactionValidator.ts b/node_modules/@opengsn/gsn/src/relayclient/RelayedTransactionValidator.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/relayclient/index.ts b/node_modules/@opengsn/gsn/src/relayclient/index.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/relayclient/types/Aliases.ts b/node_modules/@opengsn/gsn/src/relayclient/types/Aliases.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/relayclient/types/Environments.ts b/node_modules/@opengsn/gsn/src/relayclient/types/Environments.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/relayclient/types/GsnTransactionDetails.ts b/node_modules/@opengsn/gsn/src/relayclient/types/GsnTransactionDetails.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/relayclient/types/RelayFailureInfo.ts b/node_modules/@opengsn/gsn/src/relayclient/types/RelayFailureInfo.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/relayclient/types/RelayInfo.ts b/node_modules/@opengsn/gsn/src/relayclient/types/RelayInfo.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/relayclient/types/RelayRegisteredEventInfo.ts b/node_modules/@opengsn/gsn/src/relayclient/types/RelayRegisteredEventInfo.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/relayclient/types/TmpRelayTransactionJsonRequest.ts b/node_modules/@opengsn/gsn/src/relayclient/types/TmpRelayTransactionJsonRequest.ts
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/relayserver/HttpServer.js b/node_modules/@opengsn/gsn/src/relayserver/HttpServer.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/relayserver/KeyManager.js b/node_modules/@opengsn/gsn/src/relayserver/KeyManager.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/relayserver/RelayServer.js b/node_modules/@opengsn/gsn/src/relayserver/RelayServer.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/relayserver/TxStoreManager.js b/node_modules/@opengsn/gsn/src/relayserver/TxStoreManager.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/webtools/contractmanager.js b/node_modules/@opengsn/gsn/src/webtools/contractmanager.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/webtools/relaymanager.js b/node_modules/@opengsn/gsn/src/webtools/relaymanager.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/webtools/utils.js b/node_modules/@opengsn/gsn/src/webtools/utils.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/src/webtools/webtools.js b/node_modules/@opengsn/gsn/src/webtools/webtools.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/webtools.webpack.js b/node_modules/@opengsn/gsn/webtools.webpack.js
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/webtools/README.md b/node_modules/@opengsn/gsn/webtools/README.md
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/webtools/contractmanager.html b/node_modules/@opengsn/gsn/webtools/contractmanager.html
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/webtools/index.html b/node_modules/@opengsn/gsn/webtools/index.html
old mode 100644
new mode 100755
diff --git a/node_modules/@opengsn/gsn/webtools/relaymanager.html b/node_modules/@opengsn/gsn/webtools/relaymanager.html
old mode 100644
new mode 100755
